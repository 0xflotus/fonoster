{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Use the left-hand to navigate to find topics of interest","title":"Welcome"},{"location":"#welcome","text":"Use the left-hand to navigate to find topics of interest","title":"Welcome"},{"location":"coming-soon/","text":"Coming soon...","title":"Overview"},{"location":"deployment/deploying-voip-network/","text":"Configure the Voip network \u00b6 To configure your Voip network, by first creating a Provider . To create provider simply run the fonos providers:create command and follow the prompt. Refer to your Service Provider to obtain your username , password , and host . You next need add a Number to your deployment. The command for this is fonos numbers:create . You will be prompted to enter the number using the E164 format. After pressing enter, you need to select the service provider you created in the last step. Ignore the aorlink . And select the Ingress Application from the list. Finally you must create a Domain and Agent . Using fonos domains:create and fonos agent:create respectively.","title":"Configure the Voip network"},{"location":"deployment/deploying-voip-network/#configure-the-voip-network","text":"To configure your Voip network, by first creating a Provider . To create provider simply run the fonos providers:create command and follow the prompt. Refer to your Service Provider to obtain your username , password , and host . You next need add a Number to your deployment. The command for this is fonos numbers:create . You will be prompted to enter the number using the E164 format. After pressing enter, you need to select the service provider you created in the last step. Ignore the aorlink . And select the Ingress Application from the list. Finally you must create a Domain and Agent . Using fonos domains:create and fonos agent:create respectively.","title":"Configure the Voip network"},{"location":"deployment/installing-on-minikube/","text":"Prerequisites \u00b6 Kubernetes 1.18+ Helm 3.0-beta3+ Fonos CTL PV provisioner support in the underlying infrastructure Nginx ingress Controller Starting Minikube \u00b6 Start minikube using at least 4GB of memory minikube start --memory = 4052 Installing NGINX Ingress Controller \u00b6 To enable the NGINX Ingress controller, run the following command: minikube addons enable ingress If you are having issues enabling the addon, and you are on OSX, try starting minikube with the Hyperkit driver Verify that NGINX Ingress controller is running kubectl get pods -n kube-system Note: This can take up to a minute. Your output should look like this: NAME READY STATUS RESTARTS AGE default-http-backend-59868b7dd6-xb8tq 1/1 Running 0 1m kube-addon-manager-minikube 1/1 Running 0 3m kube-dns-6dcb57bcc8-n4xd4 3/3 Running 0 2m kubernetes-dashboard-5498ccf677-b8p5h 1/1 Running 0 2m nginx-ingress-controller-5984b97644-rnkrg 1/1 Running 0 1m storage-provisioner Creating and Installing the SSL certificates and JWT Token \u00b6 Run the following commmand to create and install the certificates and the token: fonos config:init Installing Fonos in your Cluster \u00b6 Run the following command to install Fonos in your minikube: helm install --wait my-release \\ --set sipproxy.externAddr = $( minikube ip ) \\ --set sipproxy.service.type = NodePort \\ --set mediaserver.externAddr = $( minikube ip ) \\ --set mediaserver.service.type = NodePort \\ fonoster/fonos Take your minikube's IP and create a new entry in your local DNS host file. The host must match your initial configuration(defaults to fonos.local ). Exposing SIP ports in Nginx Controller (Optional) \u00b6 Patch Nginx Controller to accept tcp and udp traffic. First, kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"6060\":\"default/fonos-mediaserver:6060\"}}' kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' kubectl patch configmap udp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' Then, kubectl patch deployment ingress-nginx-controller --patch \"$(cat ingress-nginx-controller-patch.yaml)\" -n kube-system spec: template: spec: containers: - name: controller ports: - containerPort: 4567 hostPort: 4567 - containerPort: 5060 hostPort: 5060 - containerPort: 6060 hostPort: 6060 Replace kube-system with nginx namespace and default with your the namespace of your release","title":"Installing Fonos on K8s with Helm"},{"location":"deployment/installing-on-minikube/#prerequisites","text":"Kubernetes 1.18+ Helm 3.0-beta3+ Fonos CTL PV provisioner support in the underlying infrastructure Nginx ingress Controller","title":"Prerequisites"},{"location":"deployment/installing-on-minikube/#starting-minikube","text":"Start minikube using at least 4GB of memory minikube start --memory = 4052","title":"Starting Minikube"},{"location":"deployment/installing-on-minikube/#installing-nginx-ingress-controller","text":"To enable the NGINX Ingress controller, run the following command: minikube addons enable ingress If you are having issues enabling the addon, and you are on OSX, try starting minikube with the Hyperkit driver Verify that NGINX Ingress controller is running kubectl get pods -n kube-system Note: This can take up to a minute. Your output should look like this: NAME READY STATUS RESTARTS AGE default-http-backend-59868b7dd6-xb8tq 1/1 Running 0 1m kube-addon-manager-minikube 1/1 Running 0 3m kube-dns-6dcb57bcc8-n4xd4 3/3 Running 0 2m kubernetes-dashboard-5498ccf677-b8p5h 1/1 Running 0 2m nginx-ingress-controller-5984b97644-rnkrg 1/1 Running 0 1m storage-provisioner","title":"Installing NGINX Ingress Controller"},{"location":"deployment/installing-on-minikube/#creating-and-installing-the-ssl-certificates-and-jwt-token","text":"Run the following commmand to create and install the certificates and the token: fonos config:init","title":"Creating and Installing the SSL certificates and JWT Token"},{"location":"deployment/installing-on-minikube/#installing-fonos-in-your-cluster","text":"Run the following command to install Fonos in your minikube: helm install --wait my-release \\ --set sipproxy.externAddr = $( minikube ip ) \\ --set sipproxy.service.type = NodePort \\ --set mediaserver.externAddr = $( minikube ip ) \\ --set mediaserver.service.type = NodePort \\ fonoster/fonos Take your minikube's IP and create a new entry in your local DNS host file. The host must match your initial configuration(defaults to fonos.local ).","title":"Installing Fonos in your Cluster"},{"location":"deployment/installing-on-minikube/#exposing-sip-ports-in-nginx-controller-optional","text":"Patch Nginx Controller to accept tcp and udp traffic. First, kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"6060\":\"default/fonos-mediaserver:6060\"}}' kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' kubectl patch configmap udp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' Then, kubectl patch deployment ingress-nginx-controller --patch \"$(cat ingress-nginx-controller-patch.yaml)\" -n kube-system spec: template: spec: containers: - name: controller ports: - containerPort: 4567 hostPort: 4567 - containerPort: 5060 hostPort: 5060 - containerPort: 6060 hostPort: 6060 Replace kube-system with nginx namespace and default with your the namespace of your release","title":"Exposing SIP ports in Nginx Controller (Optional)"},{"location":"reference/Agents/","text":"Agents \u21d0 FonosService \u00b6 Use Fonos Agents, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete Agents. Agents requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Agents \u21d0 FonosService new Agents() new Agents() new Agents() .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) new Agents() \u00b6 Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Agents() \u00b6 Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Agents() \u00b6 Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred agents.createAgent(request) \u21d2 Promise.<Object> \u00b6 Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.getAgent(ref) \u21d2 Promise.<Object> \u00b6 Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.updateAgent(request) \u21d2 Promise.<Object> \u00b6 Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred agents.listAgents(request) \u21d2 Promise.<ListAgentsResponse> \u00b6 List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred agents.deleteAgent(ref) \u00b6 Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred agents.createAgent(request) \u21d2 Promise.<Object> \u00b6 Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.getAgent(ref) \u21d2 Promise.<Object> \u00b6 Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.updateAgent(request) \u21d2 Promise.<Object> \u00b6 Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred agents.listAgents(request) \u21d2 Promise.<ListAgentsResponse> \u00b6 List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred agents.deleteAgent(ref) \u00b6 Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred agents.createAgent(request) \u21d2 Promise.<Object> \u00b6 Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.getAgent(ref) \u21d2 Promise.<Object> \u00b6 Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.updateAgent(request) \u21d2 Promise.<Object> \u00b6 Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred agents.listAgents(request) \u21d2 Promise.<ListAgentsResponse> \u00b6 List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred agents.deleteAgent(ref) \u00b6 Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"Agents"},{"location":"reference/Agents/#agents-fonosservice","text":"Use Fonos Agents, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete Agents. Agents requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Agents \u21d0 FonosService new Agents() new Agents() new Agents() .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref)","title":"Agents \u21d0 FonosService"},{"location":"reference/Agents/#new-agents","text":"Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Agents()"},{"location":"reference/Agents/#new-agents_1","text":"Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Agents()"},{"location":"reference/Agents/#new-agents_2","text":"Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : \"John Doe\" , username : \"john\" , secret : \"1234\" , domains : [ \"sip.local\" ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Agents()"},{"location":"reference/Agents/#agentscreateagentrequest-promiseobject","text":"Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.createAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsgetagentref-promiseobject","text":"Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.getAgent(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsupdateagentrequest-promiseobject","text":"Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"agents.updateAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentslistagentsrequest-promiselistagentsresponse","text":"List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.listAgents(request) \u21d2 Promise.&lt;ListAgentsResponse&gt;"},{"location":"reference/Agents/#agentsdeleteagentref","text":"Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.deleteAgent(ref)"},{"location":"reference/Agents/#agentscreateagentrequest-promiseobject_1","text":"Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.createAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsgetagentref-promiseobject_1","text":"Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.getAgent(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsupdateagentrequest-promiseobject_1","text":"Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"agents.updateAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentslistagentsrequest-promiselistagentsresponse_1","text":"List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.listAgents(request) \u21d2 Promise.&lt;ListAgentsResponse&gt;"},{"location":"reference/Agents/#agentsdeleteagentref_1","text":"Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.deleteAgent(ref)"},{"location":"reference/Agents/#agentscreateagentrequest-promiseobject_2","text":"Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.createAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsgetagentref-promiseobject_2","text":"Retrives an Agent by reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.getAgent(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsupdateagentrequest-promiseobject_2","text":"Update an Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"agents.updateAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentslistagentsrequest-promiselistagentsresponse_2","text":"List registered Agents in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Elements per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.listAgents(request) \u21d2 Promise.&lt;ListAgentsResponse&gt;"},{"location":"reference/Agents/#agentsdeleteagentref_2","text":"Deletes an Agent from the SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Agent's reference Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.deleteAgent(ref)"},{"location":"reference/AppManager/","text":"AppManager \u21d0 FonosService \u00b6 Use Fonos AppManager, a capability of Fonos Systems Manager, to create, manage, and deploy an applications. Fonos AppManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService AppManager \u21d0 FonosService new AppManager() new AppManager() new AppManager() new AppManager() .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> new AppManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new AppManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new AppManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new AppManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred appManager.deployApp(path, ref) \u21d2 Promise.<App> \u00b6 Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.getApp(ref) \u21d2 Promise.<App> \u00b6 Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.deleteApp(ref) \u21d2 Promise.<App> \u00b6 Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred appManager.listApps(request) \u21d2 Promise.<ListAppsResponse> \u00b6 List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred appManager.deployApp(path, ref) \u21d2 Promise.<App> \u00b6 Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.getApp(ref) \u21d2 Promise.<App> \u00b6 Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.deleteApp(ref) \u21d2 Promise.<App> \u00b6 Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred appManager.listApps(request) \u21d2 Promise.<ListAppsResponse> \u00b6 List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred appManager.deployApp(path, ref) \u21d2 Promise.<App> \u00b6 Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.getApp(ref) \u21d2 Promise.<App> \u00b6 Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.deleteApp(ref) \u21d2 Promise.<App> \u00b6 Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred appManager.listApps(request) \u21d2 Promise.<ListAppsResponse> \u00b6 List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred appManager.deployApp(path, ref) \u21d2 Promise.<App> \u00b6 Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.getApp(ref) \u21d2 Promise.<App> \u00b6 Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.deleteApp(ref) \u21d2 Promise.<App> \u00b6 Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred appManager.listApps(request) \u21d2 Promise.<ListAppsResponse> \u00b6 List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"AppManager"},{"location":"reference/AppManager/#appmanager-fonosservice","text":"Use Fonos AppManager, a capability of Fonos Systems Manager, to create, manage, and deploy an applications. Fonos AppManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService AppManager \u21d0 FonosService new AppManager() new AppManager() new AppManager() new AppManager() .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> .deployApp(path, ref) \u21d2 Promise.<App> .getApp(ref) \u21d2 Promise.<App> .deleteApp(ref) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse>","title":"AppManager \u21d0 FonosService"},{"location":"reference/AppManager/#new-appmanager","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new AppManager()"},{"location":"reference/AppManager/#new-appmanager_1","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new AppManager()"},{"location":"reference/AppManager/#new-appmanager_2","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new AppManager()"},{"location":"reference/AppManager/#new-appmanager_3","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new AppManager()"},{"location":"reference/AppManager/#appmanagerdeployapppath-ref-promiseapp","text":"Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deployApp(path, ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagergetappref-promiseapp","text":"Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.getApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerdeleteappref-promiseapp","text":"Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deleteApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerlistappsrequest-promiselistappsresponse","text":"List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.listApps(request) \u21d2 Promise.&lt;ListAppsResponse&gt;"},{"location":"reference/AppManager/#appmanagerdeployapppath-ref-promiseapp_1","text":"Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deployApp(path, ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagergetappref-promiseapp_1","text":"Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.getApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerdeleteappref-promiseapp_1","text":"Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deleteApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerlistappsrequest-promiselistappsresponse_1","text":"List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.listApps(request) \u21d2 Promise.&lt;ListAppsResponse&gt;"},{"location":"reference/AppManager/#appmanagerdeployapppath-ref-promiseapp_2","text":"Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deployApp(path, ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagergetappref-promiseapp_2","text":"Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.getApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerdeleteappref-promiseapp_2","text":"Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deleteApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerlistappsrequest-promiselistappsresponse_2","text":"List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.listApps(request) \u21d2 Promise.&lt;ListAppsResponse&gt;"},{"location":"reference/AppManager/#appmanagerdeployapppath-ref-promiseapp_3","text":"Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application ref string optional reference to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deployApp(path, ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagergetappref-promiseapp_3","text":"Retrives an application by reference. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description ref string The reference to the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.getApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerdeleteappref-promiseapp_3","text":"Deletes an application create on Fonos server. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description ref string The reference to the application Example appManager . deleteApp ( ref ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deleteApp(ref) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerlistappsrequest-promiselistappsresponse_3","text":"List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.listApps(request) \u21d2 Promise.&lt;ListAppsResponse&gt;"},{"location":"reference/CallManager/","text":"CallManager \u21d0 FonosService \u00b6 Use Fonos CallManager, a capability of Fonos Systems Manager, to initiate and monitor automated calls. Fonos CallManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService CallManager \u21d0 FonosService new CallManager() new CallManager() .call(request) \u21d2 Promise.<CallResponse> .call(request) \u21d2 Promise.<CallResponse> new CallManager() \u00b6 Constructs a new CallManager Object. Example const Fonos = require ( '@fonos/sdk' ) const callManager = new Fonos . CallManager () callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new CallManager() \u00b6 Constructs a new CallManager Object. Example const Fonos = require ( '@fonos/sdk' ) const callManager = new Fonos . CallManager () callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred callManager.call(request) \u21d2 Promise.<CallResponse> \u00b6 Calls method. Kind : instance method of CallManager Returns : Promise.<CallResponse> - call results Throws : if the from number doesn't exist if could not connect to the underline services Param Type Description request CallRequest call options. Example callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred callManager.call(request) \u21d2 Promise.<CallResponse> \u00b6 Calls method. Kind : instance method of CallManager Returns : Promise.<CallResponse> - call results Throws : if the from number doesn't exist if could not connect to the underline services Param Type Description request CallRequest call options. Example callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"CallManager"},{"location":"reference/CallManager/#callmanager-fonosservice","text":"Use Fonos CallManager, a capability of Fonos Systems Manager, to initiate and monitor automated calls. Fonos CallManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService CallManager \u21d0 FonosService new CallManager() new CallManager() .call(request) \u21d2 Promise.<CallResponse> .call(request) \u21d2 Promise.<CallResponse>","title":"CallManager \u21d0 FonosService"},{"location":"reference/CallManager/#new-callmanager","text":"Constructs a new CallManager Object. Example const Fonos = require ( '@fonos/sdk' ) const callManager = new Fonos . CallManager () callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new CallManager()"},{"location":"reference/CallManager/#new-callmanager_1","text":"Constructs a new CallManager Object. Example const Fonos = require ( '@fonos/sdk' ) const callManager = new Fonos . CallManager () callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new CallManager()"},{"location":"reference/CallManager/#callmanagercallrequest-promisecallresponse","text":"Calls method. Kind : instance method of CallManager Returns : Promise.<CallResponse> - call results Throws : if the from number doesn't exist if could not connect to the underline services Param Type Description request CallRequest call options. Example callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"callManager.call(request) \u21d2 Promise.&lt;CallResponse&gt;"},{"location":"reference/CallManager/#callmanagercallrequest-promisecallresponse_1","text":"Calls method. Kind : instance method of CallManager Returns : Promise.<CallResponse> - call results Throws : if the from number doesn't exist if could not connect to the underline services Param Type Description request CallRequest call options. Example callManager . call ({ from : '9102104343' , to : '17853178070' app : 'default' }) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"callManager.call(request) \u21d2 Promise.&lt;CallResponse&gt;"},{"location":"reference/Domains/","text":"Domains \u21d0 FonosService \u00b6 Use Fonos Domains, a capability of Fonos SIP Proxy Subsystem, to create, update, get and delete Domains. The API requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Domains \u21d0 FonosService new Domains(options) new Domains(options) new Domains(options) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) new Domains(options) \u00b6 Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Domains(options) \u00b6 Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Domains(options) \u00b6 Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred domains.createDomain(request) \u21d2 Promise.<CreateDomainResponse> \u00b6 Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.getDomain(ref) \u21d2 Promise.<GetDomainResponse> \u00b6 Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> \u00b6 Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.listDomains(request) \u21d2 Promise.<ListDomainsResponse> \u00b6 List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.deleteDomain(ref) \u00b6 Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred domains.createDomain(request) \u21d2 Promise.<CreateDomainResponse> \u00b6 Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.getDomain(ref) \u21d2 Promise.<GetDomainResponse> \u00b6 Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> \u00b6 Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.listDomains(request) \u21d2 Promise.<ListDomainsResponse> \u00b6 List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.deleteDomain(ref) \u00b6 Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred domains.createDomain(request) \u21d2 Promise.<CreateDomainResponse> \u00b6 Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.getDomain(ref) \u21d2 Promise.<GetDomainResponse> \u00b6 Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> \u00b6 Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.listDomains(request) \u21d2 Promise.<ListDomainsResponse> \u00b6 List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred domains.deleteDomain(ref) \u00b6 Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred","title":"Domains"},{"location":"reference/Domains/#domains-fonosservice","text":"Use Fonos Domains, a capability of Fonos SIP Proxy Subsystem, to create, update, get and delete Domains. The API requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Domains \u21d0 FonosService new Domains(options) new Domains(options) new Domains(options) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) .createDomain(request) \u21d2 Promise.<CreateDomainResponse> .getDomain(ref) \u21d2 Promise.<GetDomainResponse> .updateDomain(request) \u21d2 Promise.<UpdateDomainResponse> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref)","title":"Domains \u21d0 FonosService"},{"location":"reference/Domains/#new-domainsoptions","text":"Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Domains(options)"},{"location":"reference/Domains/#new-domainsoptions_1","text":"Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Domains(options)"},{"location":"reference/Domains/#new-domainsoptions_2","text":"Constructs a new Domains object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const domains = new Fonos . Domains (); domains . createDomain ({ name : \"Local Domain\" , domainUri : \"sip.local\" ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Domains(options)"},{"location":"reference/Domains/#domainscreatedomainrequest-promisecreatedomainresponse","text":"Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.createDomain(request) \u21d2 Promise.&lt;CreateDomainResponse&gt;"},{"location":"reference/Domains/#domainsgetdomainref-promisegetdomainresponse","text":"Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.getDomain(ref) \u21d2 Promise.&lt;GetDomainResponse&gt;"},{"location":"reference/Domains/#domainsupdatedomainrequest-promiseupdatedomainresponse","text":"Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.updateDomain(request) \u21d2 Promise.&lt;UpdateDomainResponse&gt;"},{"location":"reference/Domains/#domainslistdomainsrequest-promiselistdomainsresponse","text":"List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.listDomains(request) \u21d2 Promise.&lt;ListDomainsResponse&gt;"},{"location":"reference/Domains/#domainsdeletedomainref","text":"Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred","title":"domains.deleteDomain(ref)"},{"location":"reference/Domains/#domainscreatedomainrequest-promisecreatedomainresponse_1","text":"Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.createDomain(request) \u21d2 Promise.&lt;CreateDomainResponse&gt;"},{"location":"reference/Domains/#domainsgetdomainref-promisegetdomainresponse_1","text":"Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.getDomain(ref) \u21d2 Promise.&lt;GetDomainResponse&gt;"},{"location":"reference/Domains/#domainsupdatedomainrequest-promiseupdatedomainresponse_1","text":"Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.updateDomain(request) \u21d2 Promise.&lt;UpdateDomainResponse&gt;"},{"location":"reference/Domains/#domainslistdomainsrequest-promiselistdomainsresponse_1","text":"List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.listDomains(request) \u21d2 Promise.&lt;ListDomainsResponse&gt;"},{"location":"reference/Domains/#domainsdeletedomainref_1","text":"Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred","title":"domains.deleteDomain(ref)"},{"location":"reference/Domains/#domainscreatedomainrequest-promisecreatedomainresponse_2","text":"Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request CreateDomainRequest Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optional list of IPs or networks allow if request.accessDeny is defined Example const request = { name : \"Local Domain\" , domainUri : \"sip.local\" , egressRule : \".*\" , egressNumberRef : \"cb8V0CNTfH\" , accessDeny : [ \"0.0.0.0/1\" ] // Deny all accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the CreateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.createDomain(request) \u21d2 Promise.&lt;CreateDomainResponse&gt;"},{"location":"reference/Domains/#domainsgetdomainref-promisegetdomainresponse_2","text":"Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<GetDomainResponse> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example const ref = \"Nx05y-ldZa\" ; domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the CreateGetResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.getDomain(ref) \u21d2 Promise.&lt;GetDomainResponse&gt;"},{"location":"reference/Domains/#domainsupdatedomainrequest-promiseupdatedomainresponse_2","text":"Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request UpdateDomainRequest Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : \"Nx05y-ldZa\" , name : \"Office Domain\" , accessAllow : [ \"192.168.1.0/255.255.255.0\" , \"192.168.0.1/31\" ] }; domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the UpdateDomainResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.updateDomain(request) \u21d2 Promise.&lt;UpdateDomainResponse&gt;"},{"location":"reference/Domains/#domainslistdomainsrequest-promiselistdomainsresponse_2","text":"List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - Paginated list of Domains Param Type Description request ListDomainsRequest Optional parameter with size and token for the request request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request if any Example const request = { pageSize : 20 , pageToken : 2 }; domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"domains.listDomains(request) \u21d2 Promise.&lt;ListDomainsResponse&gt;"},{"location":"reference/Domains/#domainsdeletedomainref_2","text":"Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain you wish to delete Example const ref = \"Nx05y-ldZa\" ; domains . deleteDomain ( ref ) . then (() => { console . log ( \"done\" ) // returns a reference of the domain }). catch ( e => console . error ( e )); // an error occurred","title":"domains.deleteDomain(ref)"},{"location":"reference/Funcs/","text":"Funcs \u21d0 FonosService \u00b6 Use Fonos Funcs, a capability of FaaS subsystem, to deploy, update, get and delete functions. Fonos Funcs requires of a running Fonos deployment and FaaS. Kind : global class Extends : FonosService See : module:core:FonosService Funcs \u21d0 FonosService new Funcs(options) new Funcs(options) .deployFunc(request, emitter) \u21d2 Promise.<DeployStream> .getFunc(request) \u21d2 Promise.<GetFuncResponse> .deleteFunc(request) \u21d2 Promise.<GetFuncResponse> .listFuncs(request) \u21d2 Promise.<ListFuncsResponse> .getFuncLogs(request) \u21d2 Promise.<LogsStream> .deployFunc(request, emitter) \u21d2 Promise.<DeployStream> .getFunc(request) \u21d2 Promise.<GetFuncResponse> .deleteFunc(request) \u21d2 Promise.<GetFuncResponse> .listFuncs(request) \u21d2 Promise.<ListFuncsResponse> .getFuncLogs(request) \u21d2 Promise.<LogsStream> new Funcs(options) \u00b6 Constructs a new Funcs object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const request = { name : \"function1\" , path : \"/path/to/function\" , }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred new Funcs(options) \u00b6 Constructs a new Funcs object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const request = { name : \"function1\" , path : \"/path/to/function\" , }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred funcs.deployFunc(request, emitter) \u21d2 Promise.<DeployStream> \u00b6 Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request DeployFuncRequest Request to create or update a function request.name string Unique function name request.schedule string Unique function name request.path string Path to the function. request.limit.memory string Optional limit for function's memory utilization request.limit.cpu string Optional limit for function's cpu utilization request.requests.memory string Optional requested memory allocation for the function request.requests.cpu string Optional requested cpu allocation for the function emitter function Optional callback to capture deployment events Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , schedule : \"* * * * *\" , // Intervals using standard cron syntax path : \"/path/to/function\" , limits : { cpu : 100 m , memory : 40 Mi }, requests : { cpu : 100 m , memory : 40 Mi } }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred funcs.getFunc(request) \u21d2 Promise.<GetFuncResponse> \u00b6 Gets a system function by name. Kind : instance method of Funcs Param Type Description request GetFuncRequest Request to get a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . getFunc ( request ) . then ( result => { console . log ( result ) // successful response with the function as the body65 }). catch ( e => console . error ( e )); // an error occurred funcs.deleteFunc(request) \u21d2 Promise.<GetFuncResponse> \u00b6 Removes a function by its name. Kind : instance method of Funcs Note : This action will remove all function statistics. Param Type Description request DeleteFuncRequest Request to delete a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . deleteFunc ( request ) . then ( result => { console . log ( result ) // returns the name of the function }). catch ( e => console . error ( e )); // an error occurred funcs.listFuncs(request) \u21d2 Promise.<ListFuncsResponse> \u00b6 Returns a list of functions owned by the User. Kind : instance method of Funcs Returns : Promise.<ListFuncsResponse> - List of Functions Param Type Description request ListFuncsRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; funcs . listFuncs ( request ) . then (() => { console . log ( result ) // returns a ListFuncsResponse object }). catch ( e => console . error ( e )); // an error occurred funcs.getFuncLogs(request) \u21d2 Promise.<LogsStream> \u00b6 Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request GetFuncLogsRequest Request to obtain the logs for a function request.name string Function name request.since string Only return logs after a specific date (RFC3339) request.tail string Sets the maximum number of log messages to return, <=0 means unlimited request.follow string When true, the request will stream logs until the request timeout Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , tail : 10 , follow : true , since : \"2021-05-12T07:20:50.52Z\" }; funcs . getFuncLogs ( request ) . then ( stream => { stream . onMessage ( log => console . log ( log )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred funcs.deployFunc(request, emitter) \u21d2 Promise.<DeployStream> \u00b6 Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request DeployFuncRequest Request to create or update a function request.name string Unique function name request.schedule string Unique function name request.path string Path to the function. request.limit.memory string Optional limit for function's memory utilization request.limit.cpu string Optional limit for function's cpu utilization request.requests.memory string Optional requested memory allocation for the function request.requests.cpu string Optional requested cpu allocation for the function emitter function Optional callback to capture deployment events Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , schedule : \"* * * * *\" , // Intervals using standard cron syntax path : \"/path/to/function\" , limits : { cpu : 100 m , memory : 40 Mi }, requests : { cpu : 100 m , memory : 40 Mi } }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred funcs.getFunc(request) \u21d2 Promise.<GetFuncResponse> \u00b6 Gets a system function by name. Kind : instance method of Funcs Param Type Description request GetFuncRequest Request to get a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . getFunc ( request ) . then ( result => { console . log ( result ) // successful response with the function as the body65 }). catch ( e => console . error ( e )); // an error occurred funcs.deleteFunc(request) \u21d2 Promise.<GetFuncResponse> \u00b6 Removes a function by its name. Kind : instance method of Funcs Note : This action will remove all function statistics. Param Type Description request DeleteFuncRequest Request to delete a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . deleteFunc ( request ) . then ( result => { console . log ( result ) // returns the name of the function }). catch ( e => console . error ( e )); // an error occurred funcs.listFuncs(request) \u21d2 Promise.<ListFuncsResponse> \u00b6 Returns a list of functions owned by the User. Kind : instance method of Funcs Returns : Promise.<ListFuncsResponse> - List of Functions Param Type Description request ListFuncsRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; funcs . listFuncs ( request ) . then (() => { console . log ( result ) // returns a ListFuncsResponse object }). catch ( e => console . error ( e )); // an error occurred funcs.getFuncLogs(request) \u21d2 Promise.<LogsStream> \u00b6 Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request GetFuncLogsRequest Request to obtain the logs for a function request.name string Function name request.since string Only return logs after a specific date (RFC3339) request.tail string Sets the maximum number of log messages to return, <=0 means unlimited request.follow string When true, the request will stream logs until the request timeout Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , tail : 10 , follow : true , since : \"2021-05-12T07:20:50.52Z\" }; funcs . getFuncLogs ( request ) . then ( stream => { stream . onMessage ( log => console . log ( log )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"Funcs"},{"location":"reference/Funcs/#funcs-fonosservice","text":"Use Fonos Funcs, a capability of FaaS subsystem, to deploy, update, get and delete functions. Fonos Funcs requires of a running Fonos deployment and FaaS. Kind : global class Extends : FonosService See : module:core:FonosService Funcs \u21d0 FonosService new Funcs(options) new Funcs(options) .deployFunc(request, emitter) \u21d2 Promise.<DeployStream> .getFunc(request) \u21d2 Promise.<GetFuncResponse> .deleteFunc(request) \u21d2 Promise.<GetFuncResponse> .listFuncs(request) \u21d2 Promise.<ListFuncsResponse> .getFuncLogs(request) \u21d2 Promise.<LogsStream> .deployFunc(request, emitter) \u21d2 Promise.<DeployStream> .getFunc(request) \u21d2 Promise.<GetFuncResponse> .deleteFunc(request) \u21d2 Promise.<GetFuncResponse> .listFuncs(request) \u21d2 Promise.<ListFuncsResponse> .getFuncLogs(request) \u21d2 Promise.<LogsStream>","title":"Funcs \u21d0 FonosService"},{"location":"reference/Funcs/#new-funcsoptions","text":"Constructs a new Funcs object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const request = { name : \"function1\" , path : \"/path/to/function\" , }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"new Funcs(options)"},{"location":"reference/Funcs/#new-funcsoptions_1","text":"Constructs a new Funcs object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const request = { name : \"function1\" , path : \"/path/to/function\" , }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"new Funcs(options)"},{"location":"reference/Funcs/#funcsdeployfuncrequest-emitter-promisedeploystream","text":"Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request DeployFuncRequest Request to create or update a function request.name string Unique function name request.schedule string Unique function name request.path string Path to the function. request.limit.memory string Optional limit for function's memory utilization request.limit.cpu string Optional limit for function's cpu utilization request.requests.memory string Optional requested memory allocation for the function request.requests.cpu string Optional requested cpu allocation for the function emitter function Optional callback to capture deployment events Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , schedule : \"* * * * *\" , // Intervals using standard cron syntax path : \"/path/to/function\" , limits : { cpu : 100 m , memory : 40 Mi }, requests : { cpu : 100 m , memory : 40 Mi } }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.deployFunc(request, emitter) \u21d2 Promise.&lt;DeployStream&gt;"},{"location":"reference/Funcs/#funcsgetfuncrequest-promisegetfuncresponse","text":"Gets a system function by name. Kind : instance method of Funcs Param Type Description request GetFuncRequest Request to get a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . getFunc ( request ) . then ( result => { console . log ( result ) // successful response with the function as the body65 }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.getFunc(request) \u21d2 Promise.&lt;GetFuncResponse&gt;"},{"location":"reference/Funcs/#funcsdeletefuncrequest-promisegetfuncresponse","text":"Removes a function by its name. Kind : instance method of Funcs Note : This action will remove all function statistics. Param Type Description request DeleteFuncRequest Request to delete a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . deleteFunc ( request ) . then ( result => { console . log ( result ) // returns the name of the function }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.deleteFunc(request) \u21d2 Promise.&lt;GetFuncResponse&gt;"},{"location":"reference/Funcs/#funcslistfuncsrequest-promiselistfuncsresponse","text":"Returns a list of functions owned by the User. Kind : instance method of Funcs Returns : Promise.<ListFuncsResponse> - List of Functions Param Type Description request ListFuncsRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; funcs . listFuncs ( request ) . then (() => { console . log ( result ) // returns a ListFuncsResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.listFuncs(request) \u21d2 Promise.&lt;ListFuncsResponse&gt;"},{"location":"reference/Funcs/#funcsgetfunclogsrequest-promiselogsstream","text":"Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request GetFuncLogsRequest Request to obtain the logs for a function request.name string Function name request.since string Only return logs after a specific date (RFC3339) request.tail string Sets the maximum number of log messages to return, <=0 means unlimited request.follow string When true, the request will stream logs until the request timeout Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , tail : 10 , follow : true , since : \"2021-05-12T07:20:50.52Z\" }; funcs . getFuncLogs ( request ) . then ( stream => { stream . onMessage ( log => console . log ( log )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.getFuncLogs(request) \u21d2 Promise.&lt;LogsStream&gt;"},{"location":"reference/Funcs/#funcsdeployfuncrequest-emitter-promisedeploystream_1","text":"Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request DeployFuncRequest Request to create or update a function request.name string Unique function name request.schedule string Unique function name request.path string Path to the function. request.limit.memory string Optional limit for function's memory utilization request.limit.cpu string Optional limit for function's cpu utilization request.requests.memory string Optional requested memory allocation for the function request.requests.cpu string Optional requested cpu allocation for the function emitter function Optional callback to capture deployment events Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , schedule : \"* * * * *\" , // Intervals using standard cron syntax path : \"/path/to/function\" , limits : { cpu : 100 m , memory : 40 Mi }, requests : { cpu : 100 m , memory : 40 Mi } }; funcs . deployFunc ( request ) . then ( stream => { stream . onMessage ( msg => console . log ( msg )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.deployFunc(request, emitter) \u21d2 Promise.&lt;DeployStream&gt;"},{"location":"reference/Funcs/#funcsgetfuncrequest-promisegetfuncresponse_1","text":"Gets a system function by name. Kind : instance method of Funcs Param Type Description request GetFuncRequest Request to get a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . getFunc ( request ) . then ( result => { console . log ( result ) // successful response with the function as the body65 }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.getFunc(request) \u21d2 Promise.&lt;GetFuncResponse&gt;"},{"location":"reference/Funcs/#funcsdeletefuncrequest-promisegetfuncresponse_1","text":"Removes a function by its name. Kind : instance method of Funcs Note : This action will remove all function statistics. Param Type Description request DeleteFuncRequest Request to delete a function request.name string Unique function name Example const request = { name : \"function1\" }; funcs . deleteFunc ( request ) . then ( result => { console . log ( result ) // returns the name of the function }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.deleteFunc(request) \u21d2 Promise.&lt;GetFuncResponse&gt;"},{"location":"reference/Funcs/#funcslistfuncsrequest-promiselistfuncsresponse_1","text":"Returns a list of functions owned by the User. Kind : instance method of Funcs Returns : Promise.<ListFuncsResponse> - List of Functions Param Type Description request ListFuncsRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; funcs . listFuncs ( request ) . then (() => { console . log ( result ) // returns a ListFuncsResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.listFuncs(request) \u21d2 Promise.&lt;ListFuncsResponse&gt;"},{"location":"reference/Funcs/#funcsgetfunclogsrequest-promiselogsstream_1","text":"Creates or updates a function in the FaaS subsystem. Kind : instance method of Funcs Param Type Description request GetFuncLogsRequest Request to obtain the logs for a function request.name string Function name request.since string Only return logs after a specific date (RFC3339) request.tail string Sets the maximum number of log messages to return, <=0 means unlimited request.follow string When true, the request will stream logs until the request timeout Example const Fonos = require ( \"@fonos/sdk\" ); const funcs = new Fonos . Funcs (); const request = { name : \"function1\" , tail : 10 , follow : true , since : \"2021-05-12T07:20:50.52Z\" }; funcs . getFuncLogs ( request ) . then ( stream => { stream . onMessage ( log => console . log ( log )) stream . onFinish (() => console . log ( \"end\" )) stream . onError ( e => console . error ( e )) }). catch ( e => console . error ( e )); // an error occurred","title":"funcs.getFuncLogs(request) \u21d2 Promise.&lt;LogsStream&gt;"},{"location":"reference/Numbers/","text":"Numbers \u21d0 FonosService \u00b6 Use Fonos Numbers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete numbers. Fonos Numbers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Numbers \u21d0 FonosService new Numbers(options) new Numbers(options) new Numbers(options) new Numbers(options) .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> new Numbers(options) \u00b6 Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Numbers(options) \u00b6 Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Numbers(options) \u00b6 Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Numbers(options) \u00b6 Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred numbers.createNumber(request) \u21d2 Promise.<CreateNumberResponse> \u00b6 Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred numbers.getNumber(ref) \u21d2 Promise.<GetNumberResponse> \u00b6 Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> \u00b6 Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred numbers.listNumbers(request) \u21d2 Promise.<ListNumbersResponse> \u00b6 List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.deleteNumber(ref) \u00b6 Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred numbers.getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.createNumber(request) \u21d2 Promise.<CreateNumberResponse> \u00b6 Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred numbers.getNumber(ref) \u21d2 Promise.<GetNumberResponse> \u00b6 Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> \u00b6 Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred numbers.listNumbers(request) \u21d2 Promise.<ListNumbersResponse> \u00b6 List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.deleteNumber(ref) \u00b6 Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred numbers.getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.createNumber(request) \u21d2 Promise.<CreateNumberResponse> \u00b6 Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred numbers.getNumber(ref) \u21d2 Promise.<GetNumberResponse> \u00b6 Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> \u00b6 Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred numbers.listNumbers(request) \u21d2 Promise.<ListNumbersResponse> \u00b6 List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.deleteNumber(ref) \u00b6 Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred numbers.getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.createNumber(request) \u21d2 Promise.<CreateNumberResponse> \u00b6 Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred numbers.getNumber(ref) \u21d2 Promise.<GetNumberResponse> \u00b6 Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> \u00b6 Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred numbers.listNumbers(request) \u21d2 Promise.<ListNumbersResponse> \u00b6 List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred numbers.deleteNumber(ref) \u00b6 Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred numbers.getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred numbers.getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"Numbers"},{"location":"reference/Numbers/#numbers-fonosservice","text":"Use Fonos Numbers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete numbers. Fonos Numbers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Numbers \u21d0 FonosService new Numbers(options) new Numbers(options) new Numbers(options) new Numbers(options) .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse> .createNumber(request) \u21d2 Promise.<CreateNumberResponse> .getNumber(ref) \u21d2 Promise.<GetNumberResponse> .updateNumber(request) \u21d2 Promise.<UpdateNumberResponse> .listNumbers(request) \u21d2 Promise.<ListNumbersResponse> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<GetIngressAppResponse> .getIngressAppSync(request) \u21d2 Promise.<GetIngressAppResponse>","title":"Numbers \u21d0 FonosService"},{"location":"reference/Numbers/#new-numbersoptions","text":"Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Numbers(options)"},{"location":"reference/Numbers/#new-numbersoptions_1","text":"Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Numbers(options)"},{"location":"reference/Numbers/#new-numbersoptions_2","text":"Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Numbers(options)"},{"location":"reference/Numbers/#new-numbersoptions_3","text":"Constructs a new Numbers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const numbers = new Fonos . Numbers (); const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , ingressApp : \"hello-monkeys\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Numbers(options)"},{"location":"reference/Numbers/#numberscreatenumberrequest-promisecreatenumberresponse","text":"Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.createNumber(request) \u21d2 Promise.&lt;CreateNumberResponse&gt;"},{"location":"reference/Numbers/#numbersgetnumberref-promisegetnumberresponse","text":"Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getNumber(ref) \u21d2 Promise.&lt;GetNumberResponse&gt;"},{"location":"reference/Numbers/#numbersupdatenumberrequest-promiseupdatenumberresponse","text":"Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.updateNumber(request) \u21d2 Promise.&lt;UpdateNumberResponse&gt;"},{"location":"reference/Numbers/#numberslistnumbersrequest-promiselistnumbersresponse","text":"List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.listNumbers(request) \u21d2 Promise.&lt;ListNumbersResponse&gt;"},{"location":"reference/Numbers/#numbersdeletenumberref","text":"Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.deleteNumber(ref)"},{"location":"reference/Numbers/#numbersgetingressapprequest-promisegetingressappresponse","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressApp(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numbersgetingressappsyncrequest-promisegetingressappresponse","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressAppSync(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numberscreatenumberrequest-promisecreatenumberresponse_1","text":"Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.createNumber(request) \u21d2 Promise.&lt;CreateNumberResponse&gt;"},{"location":"reference/Numbers/#numbersgetnumberref-promisegetnumberresponse_1","text":"Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getNumber(ref) \u21d2 Promise.&lt;GetNumberResponse&gt;"},{"location":"reference/Numbers/#numbersupdatenumberrequest-promiseupdatenumberresponse_1","text":"Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.updateNumber(request) \u21d2 Promise.&lt;UpdateNumberResponse&gt;"},{"location":"reference/Numbers/#numberslistnumbersrequest-promiselistnumbersresponse_1","text":"List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.listNumbers(request) \u21d2 Promise.&lt;ListNumbersResponse&gt;"},{"location":"reference/Numbers/#numbersdeletenumberref_1","text":"Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.deleteNumber(ref)"},{"location":"reference/Numbers/#numbersgetingressapprequest-promisegetingressappresponse_1","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressApp(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numbersgetingressappsyncrequest-promisegetingressappresponse_1","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressAppSync(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numberscreatenumberrequest-promisecreatenumberresponse_2","text":"Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.createNumber(request) \u21d2 Promise.&lt;CreateNumberResponse&gt;"},{"location":"reference/Numbers/#numbersgetnumberref-promisegetnumberresponse_2","text":"Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getNumber(ref) \u21d2 Promise.&lt;GetNumberResponse&gt;"},{"location":"reference/Numbers/#numbersupdatenumberrequest-promiseupdatenumberresponse_2","text":"Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.updateNumber(request) \u21d2 Promise.&lt;UpdateNumberResponse&gt;"},{"location":"reference/Numbers/#numberslistnumbersrequest-promiselistnumbersresponse_2","text":"List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.listNumbers(request) \u21d2 Promise.&lt;ListNumbersResponse&gt;"},{"location":"reference/Numbers/#numbersdeletenumberref_2","text":"Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.deleteNumber(ref)"},{"location":"reference/Numbers/#numbersgetingressapprequest-promisegetingressappresponse_2","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressApp(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numbersgetingressappsyncrequest-promisegetingressappresponse_2","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressAppSync(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numberscreatenumberrequest-promisecreatenumberresponse_3","text":"Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request CreateNumberRequest Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : \"516f1577bcf86cd797439012\" , e164Number : \"+17853177343\" , aorLink : \"sip:1001@sip.local\" }; numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the CreateNumberResponse interface }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.createNumber(request) \u21d2 Promise.&lt;CreateNumberResponse&gt;"},{"location":"reference/Numbers/#numbersgetnumberref-promisegetnumberresponse_3","text":"Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<GetNumberResponse> - The GetNumberResponse Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the GetNumberResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getNumber(ref) \u21d2 Promise.&lt;GetNumberResponse&gt;"},{"location":"reference/Numbers/#numbersupdatenumberrequest-promiseupdatenumberresponse_3","text":"Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request UpdateNumberRequest Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : \"516f1577bcf86cd797439012\" , aorLink : \"sip:1001@sip.local\" }; numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.updateNumber(request) \u21d2 Promise.&lt;UpdateNumberResponse&gt;"},{"location":"reference/Numbers/#numberslistnumbersrequest-promiselistnumbersresponse_3","text":"List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<ListNumbersResponse> - List of Numbers Param Type Description request ListNumbersRequest request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.listNumbers(request) \u21d2 Promise.&lt;ListNumbersResponse&gt;"},{"location":"reference/Numbers/#numbersdeletenumberref_3","text":"Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = \"cb8V0CNTfH\" ; numbers . deleteNumber ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.deleteNumber(ref)"},{"location":"reference/Numbers/#numbersgetingressapprequest-promisegetingressappresponse_3","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressApp(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Numbers/#numbersgetingressappsyncrequest-promisegetingressappresponse_3","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request GetIngressAppRequest request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : \"+17853178071\" }; numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )); // an error occurred","title":"numbers.getIngressAppSync(request) \u21d2 Promise.&lt;GetIngressAppResponse&gt;"},{"location":"reference/Providers/","text":"Providers \u21d0 FonosService \u00b6 Use Fonos Providers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete providers. Fonos Providers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Providers \u21d0 FonosService new Providers(options) new Providers(options) new Providers(options) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) new Providers(options) \u00b6 Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Providers(options) \u00b6 Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred new Providers(options) \u00b6 Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred providers.createProvider(request) \u21d2 Promise.<Object> \u00b6 Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.getProvider(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.updateProvider(request) \u21d2 Promise.<Object> \u00b6 Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred providers.listProviders(request) \u21d2 Promise.<ListProvidersResponse> \u00b6 List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred providers.deleteProvider(ref) \u00b6 Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred providers.createProvider(request) \u21d2 Promise.<Object> \u00b6 Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.getProvider(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.updateProvider(request) \u21d2 Promise.<Object> \u00b6 Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred providers.listProviders(request) \u21d2 Promise.<ListProvidersResponse> \u00b6 List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred providers.deleteProvider(ref) \u00b6 Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred providers.createProvider(request) \u21d2 Promise.<Object> \u00b6 Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.getProvider(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred providers.updateProvider(request) \u21d2 Promise.<Object> \u00b6 Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred providers.listProviders(request) \u21d2 Promise.<ListProvidersResponse> \u00b6 List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred providers.deleteProvider(ref) \u00b6 Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred","title":"Providers"},{"location":"reference/Providers/#providers-fonosservice","text":"Use Fonos Providers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete providers. Fonos Providers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Providers \u21d0 FonosService new Providers(options) new Providers(options) new Providers(options) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref)","title":"Providers \u21d0 FonosService"},{"location":"reference/Providers/#new-providersoptions","text":"Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Providers(options)"},{"location":"reference/Providers/#new-providersoptions_1","text":"Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Providers(options)"},{"location":"reference/Providers/#new-providersoptions_2","text":"Constructs a new Providers object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ); const providers = new Fonos . Providers (); const request = { name : \"SIP Provider\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )); // an error occurred","title":"new Providers(options)"},{"location":"reference/Providers/#providerscreateproviderrequest-promiseobject","text":"Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.createProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersgetproviderref-promiseobject","text":"Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.getProvider(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersupdateproviderrequest-promiseobject","text":"Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"providers.updateProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providerslistprovidersrequest-promiselistprovidersresponse","text":"List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.listProviders(request) \u21d2 Promise.&lt;ListProvidersResponse&gt;"},{"location":"reference/Providers/#providersdeleteproviderref","text":"Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.deleteProvider(ref)"},{"location":"reference/Providers/#providerscreateproviderrequest-promiseobject_1","text":"Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.createProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersgetproviderref-promiseobject_1","text":"Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.getProvider(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersupdateproviderrequest-promiseobject_1","text":"Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"providers.updateProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providerslistprovidersrequest-promiselistprovidersresponse_1","text":"List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.listProviders(request) \u21d2 Promise.&lt;ListProvidersResponse&gt;"},{"location":"reference/Providers/#providersdeleteproviderref_1","text":"Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.deleteProvider(ref)"},{"location":"reference/Providers/#providerscreateproviderrequest-promiseobject_2","text":"Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : \"Provider Name\" , username : \"trunk001\" , secret : \"secretkey\" , host : \"sip.provider.net\" }; providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.createProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersgetproviderref-promiseobject_2","text":"Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.getProvider(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersupdateproviderrequest-promiseobject_2","text":"Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : \"hYTHYCYv_U\" , host : \"sip.provider.net\" }; providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )); // an error occurred","title":"providers.updateProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providerslistprovidersrequest-promiselistprovidersresponse_2","text":"List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 }; providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.listProviders(request) \u21d2 Promise.&lt;ListProvidersResponse&gt;"},{"location":"reference/Providers/#providersdeleteproviderref_2","text":"Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it\"s Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = \"hYTHYCYv_U\" ; providers . deleteProvider ( ref ) . then (() => { console . log ( \"done\" ) // returns an empty object }). catch ( e => console . error ( e )); // an error occurred","title":"providers.deleteProvider(ref)"},{"location":"reference/Storage/","text":"Storage \u21d0 FonosService \u00b6 Use Fonos Storage, a capability of Fonos Object Storage subsystem, to upload, download, and delete objects. Kind : global class Extends : FonosService See : module:core:FonosService Storage \u21d0 FonosService new Storage(options) new Storage(options) new Storage(options) new Storage(options) new Storage(options) .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> new Storage(options) \u00b6 Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Storage(options) \u00b6 Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Storage(options) \u00b6 Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Storage(options) \u00b6 Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred new Storage(options) \u00b6 Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred storage.uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> \u00b6 Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> \u00b6 Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"Storage"},{"location":"reference/Storage/#storage-fonosservice","text":"Use Fonos Storage, a capability of Fonos Object Storage subsystem, to upload, download, and delete objects. Kind : global class Extends : FonosService See : module:core:FonosService Storage \u21d0 FonosService new Storage(options) new Storage(options) new Storage(options) new Storage(options) new Storage(options) .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse> .uploadObject(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURL(request) \u21d2 Promise.<getObjectURLResponse> .uploadObjectSync(request) \u21d2 Promise.<UploadObjectResponse> .getObjectURLSync(request) \u21d2 Promise.<getObjectURLResponse>","title":"Storage \u21d0 FonosService"},{"location":"reference/Storage/#new-storageoptions","text":"Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage(options)"},{"location":"reference/Storage/#new-storageoptions_1","text":"Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage(options)"},{"location":"reference/Storage/#new-storageoptions_2","text":"Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage(options)"},{"location":"reference/Storage/#new-storageoptions_3","text":"Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage(options)"},{"location":"reference/Storage/#new-storageoptions_4","text":"Constructs a new Storage object. Param Type Description options ServiceOptions Options to indicate the objects endpoint Example const Fonos = require ( \"@fonos/sdk\" ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage(options)"},{"location":"reference/Storage/#storageuploadobjectrequest-promiseuploadobjectresponse","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisegetobjecturlresponse","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectsyncrequest-promiseuploadobjectresponse","text":"Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObjectSync(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlsyncrequest-promisegetobjecturlresponse","text":"Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURLSync(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectrequest-promiseuploadobjectresponse_1","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisegetobjecturlresponse_1","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectsyncrequest-promiseuploadobjectresponse_1","text":"Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObjectSync(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlsyncrequest-promisegetobjecturlresponse_1","text":"Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURLSync(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectrequest-promiseuploadobjectresponse_2","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisegetobjecturlresponse_2","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectsyncrequest-promiseuploadobjectresponse_2","text":"Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObjectSync(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlsyncrequest-promisegetobjecturlresponse_2","text":"Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURLSync(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectrequest-promiseuploadobjectresponse_3","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisegetobjecturlresponse_3","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectsyncrequest-promiseuploadobjectresponse_3","text":"Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObjectSync(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlsyncrequest-promisegetobjecturlresponse_3","text":"Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURLSync(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectrequest-promiseuploadobjectresponse_4","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisegetobjecturlresponse_4","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/Storage/#storageuploadobjectsyncrequest-promiseuploadobjectresponse_4","text":"Upload an object to Fonos Object Storage subsystem with synchronous method. Kind : instance method of Storage Returns : Promise.<UploadObjectResponse> - localy accessible URL to the object Throws : if the path does not exist or if is a directory if the directory does not exist Param Type Description request UploadObjectRequest Object with information about the origin and destination of an object request.bucket string Bucket at the Storage system request.dir string Directory on the Storage system where your objec will be uploaded request.filename string Path to the object to be uploaded Example const request = { filename : \"/path/to/file\" , bucket : \"apps\" , directory : \"/\" } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObjectSync(request) \u21d2 Promise.&lt;UploadObjectResponse&gt;"},{"location":"reference/Storage/#storagegetobjecturlsyncrequest-promisegetobjecturlresponse_4","text":"Get Object URL with synchronous method. Kind : instance method of Storage Returns : Promise.<getObjectURLResponse> - localy accessible URL to the object Throws : if directory or object doesn't exist Param Type Description request GetObjectURLRequest Object with information about the location and and name of the requested object request.filename string The name of the object save your file. request.accessKeyId string Optional access key id Example const request = { filename : \"object-name\" , bucket : \"bucket-name\" } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURLSync(request) \u21d2 Promise.&lt;getObjectURLResponse&gt;"},{"location":"reference/UserManager/","text":"UserManager \u21d0 FonosService \u00b6 Use Fonos UserManager, a capability of Fonos Systems Manager, to create and manage users and roles. Fonos UserManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService UserManager \u21d0 FonosService new UserManager() new UserManager() new UserManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const users = new Fonos . UserManager () TODO : Adde example new UserManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const users = new Fonos . UserManager () TODO : Adde example","title":"UserManager"},{"location":"reference/UserManager/#usermanager-fonosservice","text":"Use Fonos UserManager, a capability of Fonos Systems Manager, to create and manage users and roles. Fonos UserManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService UserManager \u21d0 FonosService new UserManager() new UserManager()","title":"UserManager \u21d0 FonosService"},{"location":"reference/UserManager/#new-usermanager","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const users = new Fonos . UserManager () TODO : Adde example","title":"new UserManager()"},{"location":"reference/UserManager/#new-usermanager_1","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const users = new Fonos . UserManager () TODO : Adde example","title":"new UserManager()"},{"location":"voice/creating-app/","text":"Prerequisites \u00b6 A running Fonos deployment Fonos CTL Create your Application \u00b6 To create a new application, create a new folder with the application's name, and run the apps:init command. The command will prompt you with a few questions, and the ctl will create a new application. ? package name default ? version 1.0.0 ? description My new Application ? entry point src/index.js ? bucket name default ? author John Doe ? license MIT ? locale en_US ? does everything look good? Yes When in doubt use the prompt's defaults Deploying the Application \u00b6 To deploy your application, run the command apps:deploy from within your new applications' folder. The out will look like this: fonos apps:deploy Deploying application... Name: default Description: My new Application Create: Sat Aug 15 2020 03:11:29 GMT+0000 (Coordinated Universal Time) Default Bucket: default Tip: Fonos will direct all inbound call to this application of no other is assigned to a given number Testing the new Application \u00b6 The fastest way to test your new application is to connect directly to the MediaServer using the test account. The test account has the following credentials: USENAME = 1001 DOMAIN = test PASSWORD = 1234 Once you configure your softphone, call the extension 1002 to interact with your new application. We don't recommend enabling direct access to the MediaServer or using the 1001@test in production","title":"Creating app"},{"location":"voice/creating-app/#prerequisites","text":"A running Fonos deployment Fonos CTL","title":"Prerequisites"},{"location":"voice/creating-app/#create-your-application","text":"To create a new application, create a new folder with the application's name, and run the apps:init command. The command will prompt you with a few questions, and the ctl will create a new application. ? package name default ? version 1.0.0 ? description My new Application ? entry point src/index.js ? bucket name default ? author John Doe ? license MIT ? locale en_US ? does everything look good? Yes When in doubt use the prompt's defaults","title":"Create your Application"},{"location":"voice/creating-app/#deploying-the-application","text":"To deploy your application, run the command apps:deploy from within your new applications' folder. The out will look like this: fonos apps:deploy Deploying application... Name: default Description: My new Application Create: Sat Aug 15 2020 03:11:29 GMT+0000 (Coordinated Universal Time) Default Bucket: default Tip: Fonos will direct all inbound call to this application of no other is assigned to a given number","title":"Deploying the Application"},{"location":"voice/creating-app/#testing-the-new-application","text":"The fastest way to test your new application is to connect directly to the MediaServer using the test account. The test account has the following credentials: USENAME = 1001 DOMAIN = test PASSWORD = 1234 Once you configure your softphone, call the extension 1002 to interact with your new application. We don't recommend enabling direct access to the MediaServer or using the 1001@test in production","title":"Testing the new Application"}]}