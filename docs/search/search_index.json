{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Use the left-hand to navigate to find topics of interest","title":"Welcome"},{"location":"#welcome","text":"Use the left-hand to navigate to find topics of interest","title":"Welcome"},{"location":"guides/creating-app/","text":"Prerequisites \u00b6 A running Fonos deployment Fonos CTL Create your Application \u00b6 To create a new application, create a new folder with the application's name, and run the apps:init command. The command will prompt you with a few questions, and the ctl will create a new application. ? package name default ? version 1.0.0 ? description My new Application ? entry point src/index.js ? bucket name default ? author John Doe ? license MIT ? locale en_US ? does everything look good? Yes When in doubt use the prompt's defaults Deploying the Application \u00b6 To deploy your application, run the command apps:deploy from within your new applications' folder. The out will look like this: fonos apps:deploy Deploying application... Name: default Description: My new Application Create: Sat Aug 15 2020 03:11:29 GMT+0000 (Coordinated Universal Time) Default Bucket: default Tip: Fonos will direct all inbound call to this application of no other is assigned to a given number Testing the new Application \u00b6 The fastest way to test your new application is to connect directly to the MediaServer using the test account. The test account has the following credentials: USENAME = 1001 DOMAIN = test PASSWORD = 1234 Once you configure your softphone, call the extension 1002 to interact with your new application. We don't recommend enabling direct access to the MediaServer or using the 1001@test in production","title":"Creating Programmable Voice App"},{"location":"guides/creating-app/#prerequisites","text":"A running Fonos deployment Fonos CTL","title":"Prerequisites"},{"location":"guides/creating-app/#create-your-application","text":"To create a new application, create a new folder with the application's name, and run the apps:init command. The command will prompt you with a few questions, and the ctl will create a new application. ? package name default ? version 1.0.0 ? description My new Application ? entry point src/index.js ? bucket name default ? author John Doe ? license MIT ? locale en_US ? does everything look good? Yes When in doubt use the prompt's defaults","title":"Create your Application"},{"location":"guides/creating-app/#deploying-the-application","text":"To deploy your application, run the command apps:deploy from within your new applications' folder. The out will look like this: fonos apps:deploy Deploying application... Name: default Description: My new Application Create: Sat Aug 15 2020 03:11:29 GMT+0000 (Coordinated Universal Time) Default Bucket: default Tip: Fonos will direct all inbound call to this application of no other is assigned to a given number","title":"Deploying the Application"},{"location":"guides/creating-app/#testing-the-new-application","text":"The fastest way to test your new application is to connect directly to the MediaServer using the test account. The test account has the following credentials: USENAME = 1001 DOMAIN = test PASSWORD = 1234 Once you configure your softphone, call the extension 1002 to interact with your new application. We don't recommend enabling direct access to the MediaServer or using the 1001@test in production","title":"Testing the new Application"},{"location":"guides/deploying-voip-network/","text":"Configure the Voip network \u00b6 To configure your Voip network, by first creating a Provider . To create provider simply run the fonos providers:create command and follow the prompt. Refer to your Service Provider to obtain your username , password , and host . You next need add a Number to your deployment. The command for this is fonos numbers:create . You will be prompted to enter the number using the E164 format. After pressing enter, you need to select the service provider you created in the last step. Ignore the aorlink . And select the Ingress Application from the list. Finally you must create a Domain and Agent . Using fonos domains:create and fonos agent:create respectively.","title":"Deploying VOIP Network"},{"location":"guides/deploying-voip-network/#configure-the-voip-network","text":"To configure your Voip network, by first creating a Provider . To create provider simply run the fonos providers:create command and follow the prompt. Refer to your Service Provider to obtain your username , password , and host . You next need add a Number to your deployment. The command for this is fonos numbers:create . You will be prompted to enter the number using the E164 format. After pressing enter, you need to select the service provider you created in the last step. Ignore the aorlink . And select the Ingress Application from the list. Finally you must create a Domain and Agent . Using fonos domains:create and fonos agent:create respectively.","title":"Configure the Voip network"},{"location":"guides/installing-on-minikube/","text":"Prerequisites \u00b6 Kubernetes 1.18+ Helm 3.0-beta3+ Fonos CTL PV provisioner support in the underlying infrastructure Nginx ingress Controller Starting Minikube \u00b6 Start minikube using at least 4GB of memory minikube start --memory = 4052 Installing NGINX Ingress Controller \u00b6 To enable the NGINX Ingress controller, run the following command: minikube addons enable ingress If you are having issues enabling the addon, and you are on OSX, try starting minikube with the Hyperkit driver Verify that NGINX Ingress controller is running kubectl get pods -n kube-system Note: This can take up to a minute. Your output should look like this: NAME READY STATUS RESTARTS AGE default-http-backend-59868b7dd6-xb8tq 1/1 Running 0 1m kube-addon-manager-minikube 1/1 Running 0 3m kube-dns-6dcb57bcc8-n4xd4 3/3 Running 0 2m kubernetes-dashboard-5498ccf677-b8p5h 1/1 Running 0 2m nginx-ingress-controller-5984b97644-rnkrg 1/1 Running 0 1m storage-provisioner Creating and Installing the SSL certificates and JWT Token \u00b6 Run the following commmand to create and install the certificates and the token: fonos config:init Installing Fonos in your Cluster \u00b6 Run the following command to install Fonos in your minikube: helm install --wait my-release \\ --set sipproxy.externAddr = $( minikube ip ) \\ --set sipproxy.service.type = NodePort \\ --set mediaserver.externAddr = $( minikube ip ) \\ --set mediaserver.service.type = NodePort \\ fonoster/fonos Take your minikube's IP and create a new entry in your local DNS host file. The host must match your initial configuration(defaults to fonos.local ). Exposing SIP ports in Nginx Controller (Optional) \u00b6 Patch Nginx Controller to accept tcp and udp traffic. First, kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"6060\":\"default/fonos-mediaserver:6060\"}}' kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' kubectl patch configmap udp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' Then, kubectl patch deployment ingress-nginx-controller --patch \"$(cat ingress-nginx-controller-patch.yaml)\" -n kube-system spec: template: spec: containers: - name: controller ports: - containerPort: 4567 hostPort: 4567 - containerPort: 5060 hostPort: 5060 - containerPort: 6060 hostPort: 6060 Replace kube-system with nginx namespace and default with your the namespace of your release","title":"Installing Fonos on Minikube"},{"location":"guides/installing-on-minikube/#prerequisites","text":"Kubernetes 1.18+ Helm 3.0-beta3+ Fonos CTL PV provisioner support in the underlying infrastructure Nginx ingress Controller","title":"Prerequisites"},{"location":"guides/installing-on-minikube/#starting-minikube","text":"Start minikube using at least 4GB of memory minikube start --memory = 4052","title":"Starting Minikube"},{"location":"guides/installing-on-minikube/#installing-nginx-ingress-controller","text":"To enable the NGINX Ingress controller, run the following command: minikube addons enable ingress If you are having issues enabling the addon, and you are on OSX, try starting minikube with the Hyperkit driver Verify that NGINX Ingress controller is running kubectl get pods -n kube-system Note: This can take up to a minute. Your output should look like this: NAME READY STATUS RESTARTS AGE default-http-backend-59868b7dd6-xb8tq 1/1 Running 0 1m kube-addon-manager-minikube 1/1 Running 0 3m kube-dns-6dcb57bcc8-n4xd4 3/3 Running 0 2m kubernetes-dashboard-5498ccf677-b8p5h 1/1 Running 0 2m nginx-ingress-controller-5984b97644-rnkrg 1/1 Running 0 1m storage-provisioner","title":"Installing NGINX Ingress Controller"},{"location":"guides/installing-on-minikube/#creating-and-installing-the-ssl-certificates-and-jwt-token","text":"Run the following commmand to create and install the certificates and the token: fonos config:init","title":"Creating and Installing the SSL certificates and JWT Token"},{"location":"guides/installing-on-minikube/#installing-fonos-in-your-cluster","text":"Run the following command to install Fonos in your minikube: helm install --wait my-release \\ --set sipproxy.externAddr = $( minikube ip ) \\ --set sipproxy.service.type = NodePort \\ --set mediaserver.externAddr = $( minikube ip ) \\ --set mediaserver.service.type = NodePort \\ fonoster/fonos Take your minikube's IP and create a new entry in your local DNS host file. The host must match your initial configuration(defaults to fonos.local ).","title":"Installing Fonos in your Cluster"},{"location":"guides/installing-on-minikube/#exposing-sip-ports-in-nginx-controller-optional","text":"Patch Nginx Controller to accept tcp and udp traffic. First, kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"6060\":\"default/fonos-mediaserver:6060\"}}' kubectl patch configmap tcp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' kubectl patch configmap udp-services -n kube-system --patch '{\"data\":{\"5060\":\"default/fonos-sipproxy:5060\"}}' Then, kubectl patch deployment ingress-nginx-controller --patch \"$(cat ingress-nginx-controller-patch.yaml)\" -n kube-system spec: template: spec: containers: - name: controller ports: - containerPort: 4567 hostPort: 4567 - containerPort: 5060 hostPort: 5060 - containerPort: 6060 hostPort: 6060 Replace kube-system with nginx namespace and default with your the namespace of your release","title":"Exposing SIP ports in Nginx Controller (Optional)"},{"location":"reference/AbstractTTS/","text":"AbstractTTS \u00b6 A building block for new TTS engines. You might use this class to create integration with ANY TTS by providing the abstracted functions, and with help of the tts/utils. Kind : global class See : module:tts:MaryTTS AbstractTTS new AbstractTTS(name) .synthesizeSync(text, options) \u21d2 string .getName() new AbstractTTS(name) \u00b6 Constructs a new AbstractTTS object. Param Type Description name string friendly name for the TTS engine abstractTTS.synthesizeSync(text, options) \u21d2 string \u00b6 Converts a text to audio. Kind : instance method of AbstractTTS Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine abstractTTS.getName() \u00b6 Gets the name of the TTS engine Kind : instance method of AbstractTTS","title":"AbstractTTS"},{"location":"reference/AbstractTTS/#abstracttts","text":"A building block for new TTS engines. You might use this class to create integration with ANY TTS by providing the abstracted functions, and with help of the tts/utils. Kind : global class See : module:tts:MaryTTS AbstractTTS new AbstractTTS(name) .synthesizeSync(text, options) \u21d2 string .getName()","title":"AbstractTTS"},{"location":"reference/AbstractTTS/#new-abstractttsname","text":"Constructs a new AbstractTTS object. Param Type Description name string friendly name for the TTS engine","title":"new AbstractTTS(name)"},{"location":"reference/AbstractTTS/#abstractttssynthesizesynctext-options-string","text":"Converts a text to audio. Kind : instance method of AbstractTTS Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine","title":"abstractTTS.synthesizeSync(text, options) \u21d2 string"},{"location":"reference/AbstractTTS/#abstractttsgetname","text":"Gets the name of the TTS engine Kind : instance method of AbstractTTS","title":"abstractTTS.getName()"},{"location":"reference/Agents/","text":"Agents \u21d0 FonosService \u00b6 Use Fonos Agents, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete Agents. Fonos Agents requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Agents \u21d0 FonosService new Agents() .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref) new Agents() \u00b6 Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred agents.createAgent(request) \u21d2 Promise.<Object> \u00b6 Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.getAgent(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Agent by its reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred agents.updateAgent(request) \u21d2 Promise.<Object> \u00b6 Update a Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred agents.listAgents(request) \u21d2 Promise.<ListAgentsResponse> \u00b6 List the Agents registered in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Agent of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred agents.deleteAgent(ref) \u00b6 Deletes a Agent from SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Reference to the Agent Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"Agents"},{"location":"reference/Agents/#agents-fonosservice","text":"Use Fonos Agents, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete Agents. Fonos Agents requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Agents \u21d0 FonosService new Agents() .createAgent(request) \u21d2 Promise.<Object> .getAgent(ref) \u21d2 Promise.<Object> .updateAgent(request) \u21d2 Promise.<Object> .listAgents(request) \u21d2 Promise.<ListAgentsResponse> .deleteAgent(ref)","title":"Agents \u21d0 FonosService"},{"location":"reference/Agents/#new-agents","text":"Constructs a new Agents object. Example const Fonos = require ( '@fonos/sdk' ) const agents = new Fonos . Agents () const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Agents()"},{"location":"reference/Agents/#agentscreateagentrequest-promiseobject","text":"Creates a new Agent on the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request for the provision of a new Agent request.name string Friendly name for the SIP device request.username string Agent's credential username request.secret string Agent's credential secret request.privacy Array.<string> If set to 'Private' Fonos removes identifiable information for the requests. Defaults to 'None' request.domains Array.<string> List of domains this Agent has access to Example const request = { name : 'John Doe' , username : 'john' , secret : '1234' , domains : [ 'sip.local' ] } agents . createAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.createAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsgetagentref-promiseobject","text":"Retrives a Agent by its reference. Kind : instance method of Agents Returns : Promise.<Object> - The agent Throws : if ref is null or Agent does not exist Param Type Description ref string Reference to Agent Example agents . getAgent ( ref ) . then ( result => { console . log ( result ) // returns the Agent object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.getAgent(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentsupdateagentrequest-promiseobject","text":"Update a Agent at the SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<Object> - The Agent from the database Param Type Description request Object Request update of an Agent request.ref string Reference to the Agent request.name string Friendly name for the SIP device request.secret string Agent's credential secret Example const request = { name : 'John Dee' , secret : '12345' } agents . updateAgent ( request ) . then ( result => { console . log ( result ) // returns the Agent from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"agents.updateAgent(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Agents/#agentslistagentsrequest-promiselistagentsresponse","text":"List the Agents registered in Fonos SIP Proxy subsystem. Kind : instance method of Agents Returns : Promise.<ListAgentsResponse> - List of Agents Param Type Description request Object request.pageSize agent Agent of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } agents . listAgents ( request ) . then (() => { console . log ( result ) // returns a ListAgentsResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.listAgents(request) \u21d2 Promise.&lt;ListAgentsResponse&gt;"},{"location":"reference/Agents/#agentsdeleteagentref","text":"Deletes a Agent from SIP Proxy subsystem. Kind : instance method of Agents Param Type Description ref string Reference to the Agent Example const ref = '507f1f77bcf86cd799439011' agents . deleteAgent ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"agents.deleteAgent(ref)"},{"location":"reference/AppManager/","text":"AppManager \u21d0 FonosService \u00b6 Use Fonos AppManager, a capability of Fonos Systems Manager, to create, manage, and deploy an applications. Fonos AppManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService AppManager \u21d0 FonosService new AppManager() .deployApp(path) \u21d2 Promise.<App> .getApp(name) \u21d2 Promise.<App> .deleteApp(name) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse> new AppManager() \u00b6 Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred appManager.deployApp(path) \u21d2 Promise.<App> \u00b6 Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.getApp(name) \u21d2 Promise.<App> \u00b6 Retrives an application by name. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description name string The name of the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred appManager.deleteApp(name) \u21d2 Promise.<App> \u00b6 Deletes an application already registered in Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description name string The name of the application Example appManager . deleteApp ( name ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred appManager.listApps(request) \u21d2 Promise.<ListAppsResponse> \u00b6 List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"AppManager"},{"location":"reference/AppManager/#appmanager-fonosservice","text":"Use Fonos AppManager, a capability of Fonos Systems Manager, to create, manage, and deploy an applications. Fonos AppManager requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService AppManager \u21d0 FonosService new AppManager() .deployApp(path) \u21d2 Promise.<App> .getApp(name) \u21d2 Promise.<App> .deleteApp(name) \u21d2 Promise.<App> .listApps(request) \u21d2 Promise.<ListAppsResponse>","title":"AppManager \u21d0 FonosService"},{"location":"reference/AppManager/#new-appmanager","text":"Constructs a new AppManager Object. Example const Fonos = require ( '@fonos/sdk' ) const appManager = new Fonos . AppManager () appManager . deployApp ( '/path/to/app' ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new AppManager()"},{"location":"reference/AppManager/#appmanagerdeployapppath-promiseapp","text":"Deploys an application to Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application just created Throws : if path to application does not exist or is not a directory the file package.json does not exist inside de application path the file package.json is missing the name or description Todo if the file uploading fails the state of the application should change to UNKNOWN. Param Type Description path string path to the application Example const path = '/path/to/project' appManager . deployApp ( path ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deployApp(path) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagergetappname-promiseapp","text":"Retrives an application by name. Kind : instance method of AppManager Returns : Promise.<App> - The application Throws : if name is null or application does not exist Param Type Description name string The name of the application Example appManager . getApp ( name ) . then ( result => { console . log ( result ) // returns the app object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.getApp(name) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerdeleteappname-promiseapp","text":"Deletes an application already registered in Fonos. Kind : instance method of AppManager Returns : Promise.<App> - The application to remove Throws : if the application is not found Param Type Description name string The name of the application Example appManager . deleteApp ( name ) . then (() => { console . log ( 'finished' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.deleteApp(name) \u21d2 Promise.&lt;App&gt;"},{"location":"reference/AppManager/#appmanagerlistappsrequest-promiselistappsresponse","text":"List the applications registered in Fonos. Kind : instance method of AppManager Returns : Promise.<ListAppsResponse> - List of applications Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } appManager . listApps ( request ) . then ( result => { console . log ( result ) // returns a ListAppsResponse }). catch ( e => console . error ( e )) // an error occurred","title":"appManager.listApps(request) \u21d2 Promise.&lt;ListAppsResponse&gt;"},{"location":"reference/Domains/","text":"Domains \u21d0 FonosService \u00b6 Use Fonos Domains, a capability of Fonos SIP Proxy Subsystem, to create, update, get and delete domains. Fonos Domains requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Domains \u21d0 FonosService new Domains() .createDomain(request) \u21d2 Promise.<Object> .getDomain(ref) \u21d2 Promise.<Object> .updateDomain(request) \u21d2 Promise.<Object> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref) new Domains() \u00b6 Constructs a new Domains object. Example const Fonos = require ( '@fonos/sdk' ) const domains = new Fonos . Domains () domains . createDomain ({ name : 'Local Domain' , domainUri : 'sip.local' ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred domains.createDomain(request) \u21d2 Promise.<Object> \u00b6 Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request Object Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { name : 'Local Domain' , domainUri : 'sip.local' , egressRule : '.*' , egressNumberRef : '507f1f77bcf86cd799439011' , accessDeny : [ '0.0.0.0/1' ] // Deny all accessAllow : [ '192.168.1.0/255.255.255.0' , '192.168.0.1/31' ] } domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the Domain object }). catch ( e => console . error ( e )) // an error occurred domains.getDomain(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<Object> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the Domain object }). catch ( e => console . error ( e )) // an error occurred domains.updateDomain(request) \u21d2 Promise.<Object> \u00b6 Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request Object Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : '507f1f77bcf86cd799439011' name : 'Office Domain ' , accessAllow : [ '192.168.1.0/255.255.255.0' , '192.168.0.1/31' ] } domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the Domain from the DB }). catch ( e => console . error ( e )) // an error occurred domains.listDomains(request) \u21d2 Promise.<ListDomainsResponse> \u00b6 List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - List of Domains Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse object }). catch ( e => console . error ( e )) // an error occurred domains.deleteDomain(ref) \u00b6 Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain Example const ref = '507f1f77bcf86cd799439011' domains . deleteDomain ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"Domains"},{"location":"reference/Domains/#domains-fonosservice","text":"Use Fonos Domains, a capability of Fonos SIP Proxy Subsystem, to create, update, get and delete domains. Fonos Domains requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Domains \u21d0 FonosService new Domains() .createDomain(request) \u21d2 Promise.<Object> .getDomain(ref) \u21d2 Promise.<Object> .updateDomain(request) \u21d2 Promise.<Object> .listDomains(request) \u21d2 Promise.<ListDomainsResponse> .deleteDomain(ref)","title":"Domains \u21d0 FonosService"},{"location":"reference/Domains/#new-domains","text":"Constructs a new Domains object. Example const Fonos = require ( '@fonos/sdk' ) const domains = new Fonos . Domains () domains . createDomain ({ name : 'Local Domain' , domainUri : 'sip.local' ...}) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Domains()"},{"location":"reference/Domains/#domainscreatedomainrequest-promiseobject","text":"Creates a new Domain on the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request Object Request for the provision of a new Domain request.name string Friendly name for the SIP domain request.domainUri string Domain URI. FQDN is recommended request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { name : 'Local Domain' , domainUri : 'sip.local' , egressRule : '.*' , egressNumberRef : '507f1f77bcf86cd799439011' , accessDeny : [ '0.0.0.0/1' ] // Deny all accessAllow : [ '192.168.1.0/255.255.255.0' , '192.168.0.1/31' ] } domains . createDomain ( request ) . then ( result => { console . log ( result ) // returns the Domain object }). catch ( e => console . error ( e )) // an error occurred","title":"domains.createDomain(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Domains/#domainsgetdomainref-promiseobject","text":"Retrives a Domain by its reference. Kind : instance method of Domains Returns : Promise.<Object> - The domain Throws : if ref is null or Domain does not exist Param Type Description ref string Reference to Domain Example domains . getDomain ( ref ) . then ( result => { console . log ( result ) // returns the Domain object }). catch ( e => console . error ( e )) // an error occurred","title":"domains.getDomain(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Domains/#domainsupdatedomainrequest-promiseobject","text":"Update a Domain at the SIP Proxy subsystem. Kind : instance method of Domains Param Type Description request Object Request for the update of an existing Domain request.ref string To update a Domain you must provide its reference request.name string Friendly name for the SIP domain request.egressNumberRef string A valid reference to a Number in Fonos request.egressRule string Regular expression indicating when a call will be routed via request.egressNumberRef request.accessDeny string Optional list of IPs or networks that cannot communicate with this Domain request.accessAllow string Optiona list of IPs or networks allow if request.accessDeny is defined Example const request = { ref : '507f1f77bcf86cd799439011' name : 'Office Domain ' , accessAllow : [ '192.168.1.0/255.255.255.0' , '192.168.0.1/31' ] } domains . updateDomain ( request ) . then ( result => { console . log ( result ) // returns the Domain from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"domains.updateDomain(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Domains/#domainslistdomainsrequest-promiselistdomainsresponse","text":"List the Domains registered in Fonos SIP Proxy subsystem. Kind : instance method of Domains Returns : Promise.<ListDomainsResponse> - List of Domains Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } domains . listDomains ( request ) . then (() => { console . log ( result ) // returns a ListDomainsResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"domains.listDomains(request) \u21d2 Promise.&lt;ListDomainsResponse&gt;"},{"location":"reference/Domains/#domainsdeletedomainref","text":"Deletes a Domain from SIP Proxy subsystem. Notice, that in order to delete a Domain, you must first delete all it's Agents. Kind : instance method of Domains Param Type Description ref string Reference to the Domain Example const ref = '507f1f77bcf86cd799439011' domains . deleteDomain ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"domains.deleteDomain(ref)"},{"location":"reference/GoogleASR/","text":"GoogleASR \u00b6 Kind : global class new GoogleASR() \u00b6 Constructs a new GoogleASR client object.","title":"GoogleASR"},{"location":"reference/GoogleASR/#googleasr","text":"Kind : global class","title":"GoogleASR"},{"location":"reference/GoogleASR/#new-googleasr","text":"Constructs a new GoogleASR client object.","title":"new GoogleASR()"},{"location":"reference/GoogleTTS/","text":"GoogleTTS \u21d0 AbstractTTS \u00b6 Optional TTS engine for Fonos. Kind : global class Extends : AbstractTTS See : module:tts:AbstractTTS GoogleTTS \u21d0 AbstractTTS new GoogleTTS() .synthesize() .synthesizeSync(text, options) \u21d2 string .getName() new GoogleTTS() \u00b6 Constructs a new GoogleTTS object. Example const GoogleTTS = require ( '@fonos/tts/googletts' ) const Storage = require ( '@fonos/storage' ) const { transcodeSync } = require ( '@fonos/tts/utils' ) // This is all done automatically when using the Say verb. module . exports = chan => { const storage = new Storage () const tts = new GoogleTTS () const pathToFile = tts . synthesizeSync ( 'Hello World' ) const pathToTranscodedFile = transcodeSync ( pathToFile ) const url = storage . uploadFileSync ( 'hello-world.wav' , pathToTranscodedFile ) chan . play ( url ) } googleTTS.synthesize() \u00b6 Kind : instance method of GoogleTTS Inherit : googleTTS.synthesizeSync(text, options) \u21d2 string \u00b6 Converts a text to audio. Kind : instance method of GoogleTTS Overrides : synthesizeSync Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine googleTTS.getName() \u00b6 Gets the name of the TTS engine Kind : instance method of GoogleTTS Overrides : getName","title":"GoogleTTS"},{"location":"reference/GoogleTTS/#googletts-abstracttts","text":"Optional TTS engine for Fonos. Kind : global class Extends : AbstractTTS See : module:tts:AbstractTTS GoogleTTS \u21d0 AbstractTTS new GoogleTTS() .synthesize() .synthesizeSync(text, options) \u21d2 string .getName()","title":"GoogleTTS \u21d0 AbstractTTS"},{"location":"reference/GoogleTTS/#new-googletts","text":"Constructs a new GoogleTTS object. Example const GoogleTTS = require ( '@fonos/tts/googletts' ) const Storage = require ( '@fonos/storage' ) const { transcodeSync } = require ( '@fonos/tts/utils' ) // This is all done automatically when using the Say verb. module . exports = chan => { const storage = new Storage () const tts = new GoogleTTS () const pathToFile = tts . synthesizeSync ( 'Hello World' ) const pathToTranscodedFile = transcodeSync ( pathToFile ) const url = storage . uploadFileSync ( 'hello-world.wav' , pathToTranscodedFile ) chan . play ( url ) }","title":"new GoogleTTS()"},{"location":"reference/GoogleTTS/#googlettssynthesize","text":"Kind : instance method of GoogleTTS Inherit :","title":"googleTTS.synthesize()"},{"location":"reference/GoogleTTS/#googlettssynthesizesynctext-options-string","text":"Converts a text to audio. Kind : instance method of GoogleTTS Overrides : synthesizeSync Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine","title":"googleTTS.synthesizeSync(text, options) \u21d2 string"},{"location":"reference/GoogleTTS/#googlettsgetname","text":"Gets the name of the TTS engine Kind : instance method of GoogleTTS Overrides : getName","title":"googleTTS.getName()"},{"location":"reference/MaryTTS/","text":"MaryTTS \u21d0 AbstractTTS \u00b6 The default TTS engine in a Fonos deployment. Kind : global class Extends : AbstractTTS See : module:tts:AbstractTTS MaryTTS \u21d0 AbstractTTS new MaryTTS() .synthesize() .synthesizeSync(text, options) \u21d2 string .getName() new MaryTTS() \u00b6 Constructs a new MaryTTS object. Example const MaryTTS = require ( '@fonos/tts/marytts' ) const Storage = require ( '@fonos/storage' ) const { transcodeSync } = require ( '@fonos/tts/utils' ) // This is all done automatically when using the Say verb. module . exports = chan => { const storage = new Storage () const tts = new MaryTTS () const pathToFile = tts . synthesizeSync ( 'Hello World' ) const pathToTranscodedFile = transcodeSync ( pathToFile ) const url = storage . uploadFileSync ( 'hello-world.wav' , pathToTranscodedFile ) chan . play ( url ) } maryTTS.synthesize() \u00b6 Kind : instance method of MaryTTS Inherit : maryTTS.synthesizeSync(text, options) \u21d2 string \u00b6 Converts a text to audio. Kind : instance method of MaryTTS Overrides : synthesizeSync Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine maryTTS.getName() \u00b6 Gets the name of the TTS engine Kind : instance method of MaryTTS Overrides : getName","title":"MaryTTS"},{"location":"reference/MaryTTS/#marytts-abstracttts","text":"The default TTS engine in a Fonos deployment. Kind : global class Extends : AbstractTTS See : module:tts:AbstractTTS MaryTTS \u21d0 AbstractTTS new MaryTTS() .synthesize() .synthesizeSync(text, options) \u21d2 string .getName()","title":"MaryTTS \u21d0 AbstractTTS"},{"location":"reference/MaryTTS/#new-marytts","text":"Constructs a new MaryTTS object. Example const MaryTTS = require ( '@fonos/tts/marytts' ) const Storage = require ( '@fonos/storage' ) const { transcodeSync } = require ( '@fonos/tts/utils' ) // This is all done automatically when using the Say verb. module . exports = chan => { const storage = new Storage () const tts = new MaryTTS () const pathToFile = tts . synthesizeSync ( 'Hello World' ) const pathToTranscodedFile = transcodeSync ( pathToFile ) const url = storage . uploadFileSync ( 'hello-world.wav' , pathToTranscodedFile ) chan . play ( url ) }","title":"new MaryTTS()"},{"location":"reference/MaryTTS/#maryttssynthesize","text":"Kind : instance method of MaryTTS Inherit :","title":"maryTTS.synthesize()"},{"location":"reference/MaryTTS/#maryttssynthesizesynctext-options-string","text":"Converts a text to audio. Kind : instance method of MaryTTS Overrides : synthesizeSync Returns : string - The path to the synthesized audio Param Type Description text string Text to convert to a audio sound options Object An object pass to the final implementation with settings for the TTS engine","title":"maryTTS.synthesizeSync(text, options) \u21d2 string"},{"location":"reference/MaryTTS/#maryttsgetname","text":"Gets the name of the TTS engine Kind : instance method of MaryTTS Overrides : getName","title":"maryTTS.getName()"},{"location":"reference/Numbers/","text":"Numbers \u21d0 FonosService \u00b6 Use Fonos Numbers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete numbers. Fonos Numbers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Numbers \u21d0 FonosService new Numbers() .createNumber(request) \u21d2 Promise.<Number> .getNumber(ref) \u21d2 Promise.<Number> .updateNumber(request) \u21d2 Promise.<Number> .listNumbers(request) \u21d2 Promise.<Number> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<Object> new Numbers() \u00b6 Constructs a new Numbers object. Example const Fonos = require ( '@fonos/sdk' ) const numbers = new Fonos . Numbers () const request = { providerRef : '516f1577bcf86cd797439012' , e164Number : '+17853177343' , ingressApp : 'hello-monkeys' } numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred numbers.createNumber(request) \u21d2 Promise.<Number> \u00b6 Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request Object Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : '516f1577bcf86cd797439012' , e164Number : '+17853177343' , aorLink : 'sip:1001@sip.local' } numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the Number object }). catch ( e => console . error ( e )) // an error occurred numbers.getNumber(ref) \u21d2 Promise.<Number> \u00b6 Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<Number> - The number Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the Number object }). catch ( e => console . error ( e )) // an error occurred numbers.updateNumber(request) \u21d2 Promise.<Number> \u00b6 Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request Object Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : '516f1577bcf86cd797439012' , aorLink : 'sip:1001@sip.local' } numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )) // an error occurred numbers.listNumbers(request) \u21d2 Promise.<Number> \u00b6 List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<Number> - List of Numbers Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )) // an error occurred numbers.deleteNumber(ref) \u00b6 Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = '507f1f77bcf86cd799439011' numbers . deleteNumber ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred numbers.getIngressApp(request) \u21d2 Promise.<Object> \u00b6 Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request Object request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : '+17853178071' } numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )) // an error occurred","title":"Numbers"},{"location":"reference/Numbers/#numbers-fonosservice","text":"Use Fonos Numbers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete numbers. Fonos Numbers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Numbers \u21d0 FonosService new Numbers() .createNumber(request) \u21d2 Promise.<Number> .getNumber(ref) \u21d2 Promise.<Number> .updateNumber(request) \u21d2 Promise.<Number> .listNumbers(request) \u21d2 Promise.<Number> .deleteNumber(ref) .getIngressApp(request) \u21d2 Promise.<Object>","title":"Numbers \u21d0 FonosService"},{"location":"reference/Numbers/#new-numbers","text":"Constructs a new Numbers object. Example const Fonos = require ( '@fonos/sdk' ) const numbers = new Fonos . Numbers () const request = { providerRef : '516f1577bcf86cd797439012' , e164Number : '+17853177343' , ingressApp : 'hello-monkeys' } numbers . createNumber ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Numbers()"},{"location":"reference/Numbers/#numberscreatenumberrequest-promisenumber","text":"Creates a new Number on the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request Object Request for the provision of a new Number request.providerRef string Idenfier to the Provider this Number belongs with request.e164_number string A valid number @ Provider request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { providerRef : '516f1577bcf86cd797439012' , e164Number : '+17853177343' , aorLink : 'sip:1001@sip.local' } numbers . createNumber ( request ) . then ( result => { console . log ( result ) // returns the Number object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.createNumber(request) \u21d2 Promise.&lt;Number&gt;"},{"location":"reference/Numbers/#numbersgetnumberref-promisenumber","text":"Retrives a Number by its reference. Kind : instance method of Numbers Returns : Promise.<Number> - The number Throws : if ref is null or Number does not exist Param Type Description ref string Reference to Number Example numbers . getNumber ( ref ) . then ( result => { console . log ( result ) // returns the Number object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.getNumber(ref) \u21d2 Promise.&lt;Number&gt;"},{"location":"reference/Numbers/#numbersupdatenumberrequest-promisenumber","text":"Update a Number at the SIP Proxy subsystem. Kind : instance method of Numbers Note : You can only provider an aorLink or an ingressApp but no both Param Type Description request Object Request for the update of an existing Number request.aorLink string An AOR where ingress calls will be directed to request.ingress_app string An Application where ingress calls will be directed to Example const request = { ref : '516f1577bcf86cd797439012' , aorLink : 'sip:1001@sip.local' } numbers . updateNumber ( request ) . then ( result => { console . log ( result ) // returns the Number from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.updateNumber(request) \u21d2 Promise.&lt;Number&gt;"},{"location":"reference/Numbers/#numberslistnumbersrequest-promisenumber","text":"List the Numbers registered in Fonos SIP Proxy subsystem. Kind : instance method of Numbers Returns : Promise.<Number> - List of Numbers Param Type Description request Object request.pageSize number Number of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } numbers . listNumbers ( request ) . then (() => { console . log ( result ) // returns a ListNumbersResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.listNumbers(request) \u21d2 Promise.&lt;Number&gt;"},{"location":"reference/Numbers/#numbersdeletenumberref","text":"Deletes a Number from SIP Proxy subsystem. Kind : instance method of Numbers Param Type Description ref string Reference to the Number Example const ref = '507f1f77bcf86cd799439011' numbers . deleteNumber ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.deleteNumber(ref)"},{"location":"reference/Numbers/#numbersgetingressapprequest-promiseobject","text":"Get the Ingress App for a given e164 number. Kind : instance method of Numbers Throws : if the Number is not register in Fonos Param Type Description request Object request.e164Number string A number in E164 format for incomming calls Example const request = { e164Number : '+17853178071' } numbers . getIngressApp ( request ) . then ( result => { console . log ( result ) // returns the Application }). catch ( e => console . error ( e )) // an error occurred","title":"numbers.getIngressApp(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/","text":"Providers \u21d0 FonosService \u00b6 Use Fonos Providers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete providers. Fonos Providers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Providers \u21d0 FonosService new Providers() .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref) new Providers() \u00b6 Constructs a new Providers object. Example const Fonos = require ( '@fonos/sdk' ) const providers = new Fonos . Providers () const request = { name : 'Provider Name' , username : 'trunk001' , secret : 'secretkey' , host : 'sip.provider.net' } providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred providers.createProvider(request) \u21d2 Promise.<Object> \u00b6 Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : 'Provider Name' , username : 'trunk001' , secret : 'secretkey' , host : 'sip.provider.net' } providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )) // an error occurred providers.getProvider(ref) \u21d2 Promise.<Object> \u00b6 Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )) // an error occurred providers.updateProvider(request) \u21d2 Promise.<Object> \u00b6 Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : '516f1577bcf86cd797439012' , host : 'sip.zone2.provider.net' } providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )) // an error occurred providers.listProviders(request) \u21d2 Promise.<ListProvidersResponse> \u00b6 List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )) // an error occurred providers.deleteProvider(ref) \u00b6 Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it's Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = '507f1f77bcf86cd799439011' providers . deleteProvider ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"Providers"},{"location":"reference/Providers/#providers-fonosservice","text":"Use Fonos Providers, a capability of Fonos SIP Proxy subsystem, to create, update, get and delete providers. Fonos Providers requires of a running Fonos deployment. Kind : global class Extends : FonosService See : module:core:FonosService Providers \u21d0 FonosService new Providers() .createProvider(request) \u21d2 Promise.<Object> .getProvider(ref) \u21d2 Promise.<Object> .updateProvider(request) \u21d2 Promise.<Object> .listProviders(request) \u21d2 Promise.<ListProvidersResponse> .deleteProvider(ref)","title":"Providers \u21d0 FonosService"},{"location":"reference/Providers/#new-providers","text":"Constructs a new Providers object. Example const Fonos = require ( '@fonos/sdk' ) const providers = new Fonos . Providers () const request = { name : 'Provider Name' , username : 'trunk001' , secret : 'secretkey' , host : 'sip.provider.net' } providers . createProvider ( request ) . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Providers()"},{"location":"reference/Providers/#providerscreateproviderrequest-promiseobject","text":"Creates a new Provider on the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request for the provision of a new Provider request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { name : 'Provider Name' , username : 'trunk001' , secret : 'secretkey' , host : 'sip.provider.net' } providers . createProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )) // an error occurred","title":"providers.createProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersgetproviderref-promiseobject","text":"Retrives a Provider by its reference. Kind : instance method of Providers Returns : Promise.<Object> - The provider Throws : if ref is null or Provider does not exist Param Type Description ref string Reference to Provider Example providers . getProvider ( ref ) . then ( result => { console . log ( result ) // returns the Provider object }). catch ( e => console . error ( e )) // an error occurred","title":"providers.getProvider(ref) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providersupdateproviderrequest-promiseobject","text":"Update a Provider at the SIP Proxy subsystem. Kind : instance method of Providers Param Type Description request Object Request to update a Provider request.ref string Providers reference request.name string Friendly name to the Provider request.username string Username for the trunk. No required for static IP authentication request.secret string Password for the trunk. No required for static IP authentication request.host string Hostname or IP of the Provider request.transport string The transport for the Provider. Fonos will use TCP if none is provided request.expires string Expiration time for the registration. Fonos will use 3600 if non is provided Example const request = { ref : '516f1577bcf86cd797439012' , host : 'sip.zone2.provider.net' } providers . updateProvider ( request ) . then ( result => { console . log ( result ) // returns the Provider from the DB }). catch ( e => console . error ( e )) // an error occurred","title":"providers.updateProvider(request) \u21d2 Promise.&lt;Object&gt;"},{"location":"reference/Providers/#providerslistprovidersrequest-promiselistprovidersresponse","text":"List the Providers registered in Fonos SIP Proxy subsystem. Kind : instance method of Providers Returns : Promise.<ListProvidersResponse> - List of Providers Param Type Description request Object request.pageSize provider Provider of element per page (defaults to 20) request.pageToken string The next_page_token value returned from a previous List request, if any Example const request = { pageSize : 20 , pageToken : 2 } providers . listProviders ( request ) . then (() => { console . log ( result ) // returns a ListProvidersResponse object }). catch ( e => console . error ( e )) // an error occurred","title":"providers.listProviders(request) \u21d2 Promise.&lt;ListProvidersResponse&gt;"},{"location":"reference/Providers/#providersdeleteproviderref","text":"Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete a Provider, you must first delete all it's Agents. Kind : instance method of Providers Param Type Description ref string Reference to the Provider Example const ref = '507f1f77bcf86cd799439011' providers . deleteProvider ( ref ) . then (() => { console . log ( 'done' ) // returns an empty object }). catch ( e => console . error ( e )) // an error occurred","title":"providers.deleteProvider(ref)"},{"location":"reference/Storage/","text":"Storage \u21d0 FonosService \u00b6 Use Fonos Storage, a capability of Fonos Object Storage subsystem, to upload, download, and delete objects. Kind : global class Extends : FonosService See : module:core:FonosService Storage \u21d0 FonosService new Storage() .uploadObject(request) .getObjectURL(request) \u21d2 Promise.<string> new Storage() \u00b6 Constructs a new Storage object. Example const Fonos = require ( '@fonos/sdk' ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred storage.uploadObject(request) \u00b6 Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Throws : if the path does not exist or if is a directory if the bucket does not exist Param Type Description request Object Object with information about the origin and destination of an object request.filename string Path to the object to be uploaded request.bucket string Directory at the Storage system to save your file. Example const request = { filename : '/path/to/file' , bucklet : 'hello-monkeys' } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred storage.getObjectURL(request) \u21d2 Promise.<string> \u00b6 Get Object URL. Kind : instance method of Storage Returns : Promise.<string> - localy accessible URL to the object Throws : if bucket or object does not exist Param Type Description request Object Object with information about the location and and name of the requested object request.name string The name of the object request.bucket string Bucket where object is located save your file. Example const request = { name : 'object-name' , bucket : 'bucket-name' } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"Storage"},{"location":"reference/Storage/#storage-fonosservice","text":"Use Fonos Storage, a capability of Fonos Object Storage subsystem, to upload, download, and delete objects. Kind : global class Extends : FonosService See : module:core:FonosService Storage \u21d0 FonosService new Storage() .uploadObject(request) .getObjectURL(request) \u21d2 Promise.<string>","title":"Storage \u21d0 FonosService"},{"location":"reference/Storage/#new-storage","text":"Constructs a new Storage object. Example const Fonos = require ( '@fonos/sdk' ) const storage = new Fonos . Storage () storage . uploadObject () . then ( result => { console . log ( result ) // successful response }). catch ( e => console . error ( e )) // an error occurred","title":"new Storage()"},{"location":"reference/Storage/#storageuploadobjectrequest","text":"Upload an object to Fonos Object Storage subsystem. Kind : instance method of Storage Throws : if the path does not exist or if is a directory if the bucket does not exist Param Type Description request Object Object with information about the origin and destination of an object request.filename string Path to the object to be uploaded request.bucket string Directory at the Storage system to save your file. Example const request = { filename : '/path/to/file' , bucklet : 'hello-monkeys' } storage . uploadObject ( request ) . then (() => { console . log ( result ) // returns and empty Object }). catch ( e => console . error ( e )) // an error occurred","title":"storage.uploadObject(request)"},{"location":"reference/Storage/#storagegetobjecturlrequest-promisestring","text":"Get Object URL. Kind : instance method of Storage Returns : Promise.<string> - localy accessible URL to the object Throws : if bucket or object does not exist Param Type Description request Object Object with information about the location and and name of the requested object request.name string The name of the object request.bucket string Bucket where object is located save your file. Example const request = { name : 'object-name' , bucket : 'bucket-name' } storage . getObjectURL ( request ) . then ( result => { console . log ( result ) }). catch ( e => console . error ( e )) // an error occurred","title":"storage.getObjectURL(request) \u21d2 Promise.&lt;string&gt;"},{"location":"reference/Verbs/","text":"Verbs \u00b6 Kind : global class Params : Channel channel - Channel object pass from AGI-Node Params : Object config - This parameter is required for proper operation of some verbs, such as Say . Params : Storage config.storage - An instance of the Storage object Params : TTS config.tts - An instance of a TTS engine implementation Verbs new Verbs() .overrideTTS(tts) .answer() .hangup() .setAutoHangup() .play(file, options) \u21d2 string .say(text, options) \u21d2 string .wait() .gather(text, options) \u21d2 string .record(text, options) \u21d2 string .stash() new Verbs() \u00b6 Constructs a new Verbs object. verbs.overrideTTS(tts) \u00b6 /** Replaces default TTS engine with a new implementation. Kind : instance method of Verbs Param tts verbs.answer() \u00b6 Answer a call if not already answered. Kind : instance method of Verbs verbs.hangup() \u00b6 Terminates a call if not already terminated. Kind : instance method of Verbs verbs.setAutoHangup() \u00b6 Terminates at timeout Kind : instance method of Verbs verbs.play(file, options) \u21d2 string \u00b6 Plays an audio in the calls channel. Kind : instance method of Verbs Returns : string - Pressed key or undefined if no key was pressed before timeout Param Type Description file string Is a file that has been previously uploaded or is available by default in the applications bucket. options Object Optional parameters to alter the command's normal behavior options.finishOnKey string Key to terminate the playing Example const options { finishOnKey : '#'', } const result = chan.play(' tts - monkeys ' , options ) verbs.say(text, options) \u21d2 string \u00b6 Sythentizes a text and streams the resulting audio. Kind : instance method of Verbs Returns : string - Pressed key or undefined if no key was pressed before timeout Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.finishOnKey string Key to terminate the playing Example const options { finishOnKey : '#'', } const result = chan.say(' hello , this is an audio sample ' , options ) verbs.wait() \u00b6 Plays a silence for time seconds. Kind : instance method of Verbs Params : number time - A time seconds to wait for verbs.gather(text, options) \u21d2 string \u00b6 The Gather verb is used in combination with Play, Say, Wait. Kind : instance method of Verbs Returns : string - Pressed digits or undefined if no keys were pressed before timeout Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.timeout string Time to finish if no key is pressed options.finishOnKey string Key to terminate the playing options.maxDigits string Max number of digits accepted Example const options { finishOnKey : '#'', maxDigits: 4 } const result = chan.gather(chan.say(' this is an audio sample ' ), options ) verbs.record(text, options) \u21d2 string \u00b6 Record creates a file with the sound send by receiving device Kind : instance method of Verbs Returns : string - Metadata with information about the recordings Todo Add constrains for the file's format Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.timeout string Time to finish if no key is pressed options.finishOnKey string Key to terminate the playing options.beep string Wether to beep or not before beginig the recordings. Defaults to 'false' options.silenceSeconds string Causes the recording to first seek to the specified offset before recording begins options.maxDuration string Maximum duration of the recording. Defaults to 1 hour. Example const options = { timeout : 4 , // Default finishOnKey : # , // Characters used to finish the recording beep : true , silenceSeconds : 0 , maxDuration : 3600 // Maximum duration in seconds } const result = chan . record ( options ) verbs.stash() \u00b6 Saves a set of key,value in the Call Detail Record. Kind : instance method of Verbs Example chan . stash ( 'choice' , chan . say ( 'enter your option' ))","title":"Verbs"},{"location":"reference/Verbs/#verbs","text":"Kind : global class Params : Channel channel - Channel object pass from AGI-Node Params : Object config - This parameter is required for proper operation of some verbs, such as Say . Params : Storage config.storage - An instance of the Storage object Params : TTS config.tts - An instance of a TTS engine implementation Verbs new Verbs() .overrideTTS(tts) .answer() .hangup() .setAutoHangup() .play(file, options) \u21d2 string .say(text, options) \u21d2 string .wait() .gather(text, options) \u21d2 string .record(text, options) \u21d2 string .stash()","title":"Verbs"},{"location":"reference/Verbs/#new-verbs","text":"Constructs a new Verbs object.","title":"new Verbs()"},{"location":"reference/Verbs/#verbsoverridettstts","text":"/** Replaces default TTS engine with a new implementation. Kind : instance method of Verbs Param tts","title":"verbs.overrideTTS(tts)"},{"location":"reference/Verbs/#verbsanswer","text":"Answer a call if not already answered. Kind : instance method of Verbs","title":"verbs.answer()"},{"location":"reference/Verbs/#verbshangup","text":"Terminates a call if not already terminated. Kind : instance method of Verbs","title":"verbs.hangup()"},{"location":"reference/Verbs/#verbssetautohangup","text":"Terminates at timeout Kind : instance method of Verbs","title":"verbs.setAutoHangup()"},{"location":"reference/Verbs/#verbsplayfile-options-string","text":"Plays an audio in the calls channel. Kind : instance method of Verbs Returns : string - Pressed key or undefined if no key was pressed before timeout Param Type Description file string Is a file that has been previously uploaded or is available by default in the applications bucket. options Object Optional parameters to alter the command's normal behavior options.finishOnKey string Key to terminate the playing Example const options { finishOnKey : '#'', } const result = chan.play(' tts - monkeys ' , options )","title":"verbs.play(file, options) \u21d2 string"},{"location":"reference/Verbs/#verbssaytext-options-string","text":"Sythentizes a text and streams the resulting audio. Kind : instance method of Verbs Returns : string - Pressed key or undefined if no key was pressed before timeout Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.finishOnKey string Key to terminate the playing Example const options { finishOnKey : '#'', } const result = chan.say(' hello , this is an audio sample ' , options )","title":"verbs.say(text, options) \u21d2 string"},{"location":"reference/Verbs/#verbswait","text":"Plays a silence for time seconds. Kind : instance method of Verbs Params : number time - A time seconds to wait for","title":"verbs.wait()"},{"location":"reference/Verbs/#verbsgathertext-options-string","text":"The Gather verb is used in combination with Play, Say, Wait. Kind : instance method of Verbs Returns : string - Pressed digits or undefined if no keys were pressed before timeout Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.timeout string Time to finish if no key is pressed options.finishOnKey string Key to terminate the playing options.maxDigits string Max number of digits accepted Example const options { finishOnKey : '#'', maxDigits: 4 } const result = chan.gather(chan.say(' this is an audio sample ' ), options )","title":"verbs.gather(text, options) \u21d2 string"},{"location":"reference/Verbs/#verbsrecordtext-options-string","text":"Record creates a file with the sound send by receiving device Kind : instance method of Verbs Returns : string - Metadata with information about the recordings Todo Add constrains for the file's format Param Type Description text string Will be convert into a file and put in a cache for future use. options Object Optional parameters to alter the command's normal behavior. options.timeout string Time to finish if no key is pressed options.finishOnKey string Key to terminate the playing options.beep string Wether to beep or not before beginig the recordings. Defaults to 'false' options.silenceSeconds string Causes the recording to first seek to the specified offset before recording begins options.maxDuration string Maximum duration of the recording. Defaults to 1 hour. Example const options = { timeout : 4 , // Default finishOnKey : # , // Characters used to finish the recording beep : true , silenceSeconds : 0 , maxDuration : 3600 // Maximum duration in seconds } const result = chan . record ( options )","title":"verbs.record(text, options) \u21d2 string"},{"location":"reference/Verbs/#verbsstash","text":"Saves a set of key,value in the Call Detail Record. Kind : instance method of Verbs Example chan . stash ( 'choice' , chan . say ( 'enter your option' ))","title":"verbs.stash()"}]}